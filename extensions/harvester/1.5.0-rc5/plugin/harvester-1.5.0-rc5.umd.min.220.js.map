{"version":3,"file":"harvester-1.5.0-rc5.umd.min.220.js","mappings":"+PAAAA,IAAA,G,8FAiDEC,EAAAA,EAAAA,oBAYM,YAXOC,EAAAC,YAAS,kBAApBF,EAAAA,EAAAA,oBAMM,MAxDVG,EAAA,CAoDcF,EAAAG,QAAK,kBADbC,EAAAA,EAAAA,aAIEC,EAAA,CAvDRP,IAAA,EAqDSQ,MAAOC,EAAAC,gBACPC,MAAOF,EAAAG,c,4BAtDhBC,EAAAA,EAAAA,oBAAA,8BAyDIP,EAAAA,EAAAA,aAGEC,EAAA,CA5DNP,IAAA,EA2DOK,MAAOH,EAAAY,K,+CAxDd,GACEC,WAAY,CAAEC,WAAUA,EAAAA,GACxBC,MAAY,CACVZ,MAAO,CACLa,KAASC,OACTC,QAAS,IAEXN,IAAK,CACHI,KAAUG,OACVC,UAAU,GAEZC,IAAK,CACHL,KAASG,OACTD,QAASA,QAGXjB,UAAW,CACTe,KAASM,QACTJ,SAAS,IAIbK,IAAAA,GACE,MAAO,CACLb,aAAiB,GACjBF,gBAAiB,GAErB,EAEAgB,MAAO,CACLrB,MAAO,CACLsB,OAAAA,GACE,GAAIC,KAAKzB,UAAW,CAClB,MAAMK,GAAQqB,EAAAA,EAAAA,IAAcD,KAAKvB,OAEjCuB,KAAKhB,cAAeA,EAAAA,EAAAA,IAAagB,KAAKvB,OACtCuB,KAAKlB,gBAAkBF,EAAMsB,QAAQ,QAAS,MAChD,CACF,EACAC,WAAW,K,WCrCjB,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O,yMCGO,MAAMC,EAAW,CACtBC,gBAAgB,EAChBC,SAAgB,CAAC,oBACjBC,OAAgB,CACd,CACE,YACA,SACA,QACA,8BAKOC,EAAU,CAAElB,QAAS,4BAErBmB,EAAa,CAAC,CACzBC,IAAM,MACNC,KAAM,SACNvB,KAAM,WAGKwB,EAAoB,CAC/BC,aAA0B,eAC1BC,yBAA0B,sBAC1BC,oBAA0B,kBAG5B,MACEC,QAAS,CACPC,qBAAAA,CAAsBC,GAEpB,MAAMC,EAAcD,EAAaE,EAAAA,GAAAA,cAAmBF,GAAcE,EAAAA,GAAAA,cAAmB,CAAC,GAChFC,EAAQF,GAAaG,UAAUD,OAAS,GAE9C,IAAIE,GAAQ,EAkBZ,OAhB6B,iBAAzBJ,GAAaK,SAA8BL,GAAaK,SAASC,SAAS,qBAC5EF,GAAQ,IAGyB,iBAA/BJ,GAAaO,eAAoCP,GAAaO,eAAeD,SAAS,qBACxFF,GAAQ,GAGVF,EAAMM,KAAKC,IACT,MAAM1D,EAAM0D,EAAK1D,KAEU,iBAAvBA,GAAKwD,eAAoCxD,GAAKwD,eAAeD,SAAS,qBACxEF,GAAQ,EACV,IAGKA,CACT,EAEAM,WAAAA,CAAYC,GACV,MAAMC,EAAUjC,KAAKkC,OAAOC,QAAQ,kBAAkBF,QAChDG,EAAOpC,KAAKkC,OAAOC,QAAQ,GAAIF,SAAgBI,EAAAA,GAAIC,MAAQ,GAEjE,OAAOF,EAAKG,MAAOC,GAAMA,EAAER,KAAOA,KAAKS,MAAMC,gBAAaC,CAC5D,EAEAC,SAAAA,CAAUC,GACR,OAAOA,EAAGC,UAAUC,SAASC,EAAAA,EAAgBC,GAC/C,EAEAC,WAAAA,CAAYC,GACV,MAAMC,GAAYC,EAAAA,EAAAA,IAAM/C,GACxB,IAAIgD,GAAe,EAcnB,OAZAL,EAAAA,GAAGM,SAASf,IACNA,EAAEgB,QACJF,EAAed,EAAEgB,MAAMjB,MAAMjD,GAASA,IAAS6D,IACjD,IAIAC,EAAU3C,OAAO,GAAG,GADlB6C,EACuB5C,EAAQyC,GAERzC,EAAQ,WAG5B0C,CACT,EAEAK,gBAAAA,CAAiBN,GACf,MAAMC,GAAYC,EAAAA,EAAAA,IAAM/C,GAQxB,OALE8C,EAAU3C,OAAO,GAAG,GADP,aAAX0C,EACuBzC,EAAQ,WAERA,EAAQ,QAG5B0C,EAAU3C,OAAO,EAC1B,EAEAiD,eAAAA,CAAgBtC,EAAY+B,EAAQQ,GAClC,IAAIC,EAAa,CAAC,EAClB,MAAMR,EAAYpD,KAAKkD,YAAYC,GAEnC,IACES,EAAaC,IAAAA,KAAYzC,IAAe,CAAC,CAC3C,CAAE,MAAO0C,GAGP,OAFA,IAAIC,MAAM,mCAEHJ,CACT,CAEA,OAAOC,GAAYpD,UAAUmB,SAAS,uBAAyBiC,GAAYnD,QAAQ8B,MAAOyB,GAAMC,MAAMC,QAAQF,IAAMA,EAAEG,KAAK,OAASf,EAAU3C,OAAO,GAAG0D,KAAK,MAC/J,EAEAC,kBAAAA,CAAmB3B,GACjB,MAAM4B,EAAS5B,GAAM6B,UAAU7B,MAAM8B,QAAQC,SAASH,OAEtD,QAAIJ,MAAMC,QAAQG,MACPA,EAAO9B,MAAMC,GACbiC,IAAQjC,EAAG7B,EAAW,KAKnC,EAEA+D,YAAAA,CAAajC,GACX,QAAUA,GAAM6B,UAAU7B,MAAM8B,QAAQI,UAAUC,YAAYC,GAChE,EAEAC,YAAAA,CAAarC,GACX,QAASA,GAAM6B,UAAU7B,MAAM8B,QAAQC,SAASO,GAClD,EAEAC,2BAAAA,CAA4BvC,GAC1B,QAASA,GAAM6B,UAAU7B,MAAM8B,QAAQC,SAASO,KAAKE,UACvD,EAEAC,2BAAAA,CAA4BzC,GAC1B,QAASA,GAAM6B,UAAU7B,MAAM8B,QAAQI,UAAUC,YAAYC,KAAKI,UACpE,EAEAE,YAAAA,CAAa1C,GACX,QAASA,GAAM6B,UAAU7B,MAAM8B,QAAQI,UAAUC,YAAYC,KAAKO,UACpE,EAEAC,YAAAA,CAAa5C,GACX,QAASA,GAAM6B,UAAU7B,MAAM8B,QAAQe,KAAKC,qBAC9C,EAEAC,mBAAAA,CAAoB/C,GAClB,MAAMgD,EAASzF,KAAK0F,UAAUjD,GAC9B,IAAIkD,EAAWF,GAAQG,aAAaC,SAChCC,EAAcL,GAAQG,aAAaG,YAEvC,MAAMC,EAAmBvD,GAAM6B,UAAU7B,MAAMwD,SAAS1D,MAAO2D,GAC3C,kBAAXA,EAAErF,QACPmF,kBAAoB,CAAC,EAazB,OAVIA,GAAkBL,WACpBA,EAAWK,EAAiBL,SAC5B3F,KAAKmG,yBAA0B,GAG7BH,GAAkBF,cACpBA,EAAcE,EAAiBF,YAC/B9F,KAAKoG,4BAA6B,GAG7B,CAAET,WAAUG,cACrB,EAEAJ,SAAAA,CAAUjD,GACR,MAAMuD,EAAmBvD,GAAM6B,UAAU7B,MAAMwD,SAAS1D,MAAO2D,GAC3C,kBAAXA,EAAErF,QACPmF,kBAAoB,CAAC,EACnB/D,EAAUjC,KAAKkC,OAAOC,QAAQ,kBAAkBF,QAChDoE,EAAUrG,KAAKkC,OAAOC,QAAQ,GAAIF,SAAgBqE,EAAAA,KAAW,GAE7DC,EAAaP,GAAkBQ,WAAW3F,MAAQmF,GAAkBS,sBAAsB5F,KAE1F4E,EAASY,EAAQ9D,MAAMmE,GAAMA,EAAE5D,SAASjC,OAAS0F,IAEvD,OAAOd,CACT,EAEAkB,oBAAAA,CAAqBlE,GACnB,MAAMR,EAAUjC,KAAKkC,OAAOC,QAAQ,kBAAkBF,QAChDoE,EAAUrG,KAAKkC,OAAOC,QAAQ,GAAIF,SAAgBqE,EAAAA,KAAW,GAC7DM,EAAcnE,GAAM6B,UAAU7B,MAAMoE,mBAAqB,GACzDC,EAAcC,KAAKC,MAAMvE,EAAK6B,SAASxB,UAAUgE,cAAc9D,EAAAA,EAAgBiE,wBAA0B,MAE/G,OAAOL,EAAY/E,KAAKqF,IACtB,MAAMC,EAAWD,EAAEE,aAAe,eAAiB,eAC7Cb,EAAaW,EAAEC,IAASA,QAAQ1B,QAAQc,WACxCC,EAAYH,EAAQ9D,MAAMmE,GAAMA,EAAE5D,SAASjC,OAAS0F,IACpDc,EAAM,CACVF,SAAQG,SAAU,GAAIC,YAAa,GAAIC,MAAO,GAAIC,QAAS,GAAIlB,aAAYC,aAG7E,GAAKA,EAEE,GAAe,iBAAXW,EAA2B,CACpC,MAAMG,EAAW7H,OAAOiI,KAAKlB,GAAW3G,MAAM,GACxC0H,EAAcf,EAAUZ,YAAY0B,GAE1CD,EAAIC,SAAWA,EACfD,EAAIE,YAAcA,CACpB,KAAO,CACL,MAAMC,EAAQN,EAAEC,GAAQQ,kBAAkBC,eAAeJ,MACnDC,EAAUX,IAAcP,GAE9Bc,EAAIG,MAAQA,EACZH,EAAII,QAAUA,CAChB,MAbEJ,EAAIb,eAAY7D,EAelB,OAAO0E,CAAG,GAEd,EAEAQ,cAAAA,CAAehF,GACb,MAAMoD,GAAU6B,EAAAA,EAAAA,GAA0BjF,GAE1C,OAAOoD,IAAU,IAAInD,UAAUgE,cAAc9D,EAAAA,EAAgB+E,WAAa,EAC5E,EAEAC,oBAAAA,CAAqBvF,GACnB,MAAMwF,EAAMxF,GAAM6B,UAAUxB,UAAUgE,cAAc9D,EAAAA,EAAgBkF,YAAc,KAElF,OAAOnB,KAAKC,MAAMiB,EACpB,EAEAE,aAAAA,CAAcC,EAAS,IACrB,IAAIf,EAAM,CAAC,EAEX,IACEA,EAAMxD,IAAAA,KAAYuE,EACpB,CAAE,MAAOtE,GACP,IAAIC,MAAM,gCACZ,CAEA,OAAOsD,CACT,EAEAgB,kBAAAA,CAAmB1C,GACjB,OAAO3F,KAAKmI,cAAcxC,IAAW2C,qBAAuB,EAC9D,EAEAC,eAAAA,CAAgBC,EAAI,GAAIC,EAAI,IAC1B,MAAMC,EAAI,2BAEV,OAAOF,EAAEtI,QAAQwI,EAAG,MAAQD,EAAEvI,QAAQwI,EAAG,GAC3C,EAEAC,YAAAA,CAAalG,GACX,MAAMiF,EAAO1H,KAAKgI,qBAAqBvF,IAC/BrB,WAAYuE,GAAa3F,KAAKwF,oBAAoB/C,GAE1D,IAAKiF,GAAMkB,OAAS,IAAMjD,EACxB,MAAO,GAGT,IAAI0B,EAAM,GAEV,MAAMpF,EAAUjC,KAAKkC,OAAOC,QAAQ,kBAAkBF,QAChD4G,EAAU7I,KAAKkC,OAAOC,QAAQ,GAAIF,SAAgBI,EAAAA,GAAIC,MAAQ,GAEpE+E,GAAOK,GAAQ,IAAI7F,KAAKG,IACtB,MAAM8G,EAAiBD,EAAQtG,MAAMwG,GAAQA,EAAI/G,KAAOA,IAExD,OAAI8G,EACK,CACL9G,GAAM8G,EAAe9G,GACrBnC,KAAMiJ,EACNxJ,KAAMwB,EAAkBC,cAGnB,CACLiB,KACAnC,KAAMmC,EACN1C,KAAMwB,EAAkBE,yBAE5B,IAGF,MAAMgI,EAAehJ,KAAKqI,mBAAmB1C,GAoB7C,OAlBAqD,EAAanH,KAAMoH,IACjB,MAAMH,EAAiBD,EAAQtG,MAAMwG,GAAQ/I,KAAKuI,gBAAgBU,EAAUF,EAAItG,MAAMC,aAElFoG,IAAmBzB,EAAI9E,MAAMC,GAAMA,EAAER,KAAO8G,EAAe9G,KAC7DqF,EAAI6B,KAAK,CACPlH,GAAM8G,EAAe9G,GACrBnC,KAAMiJ,EACNxJ,KAAMwB,EAAkBC,eAEhB+H,GACVzB,EAAI6B,KAAK,CACPlH,GAAM,UACNnC,KAAMoJ,EACN3J,KAAMwB,EAAkBG,qBAE5B,IAGKoG,CACT,G,+XC7RJ,MAAM8B,EAA0B,iCAEnBC,EAAqB,qBAErBnG,EAAK,CAAC,CACjBlE,MAAO,UACPN,MAAO,WACN,CACDM,MAAO,QACPN,MAAO,SACN,CACDM,MAAO,wBACPN,MAAO,QACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,UACPyE,MAAO,CAAC,SAAU,QAClB/E,MAAO,UACN,CACDM,MAAO,WACPN,MAAO,YACN,CACDM,MAAO,SACPN,MAAO,UACN,CACDM,MAAO,cACPyE,MAAO,CAAC,UACR/E,MAAO,eAGI4K,EAAS,SACTC,EAAY,OAEzB,MACEC,OAAQ,CAACC,EAAAA,IAETnK,MAAO,CACLZ,MAAO,CACLa,KAAUG,OACVC,UAAU,GAGZ+J,aAAc,CACZnK,KAASC,OACTC,QAAS,KAIb,WAAMkK,GACJ,MAAMzH,EAAUjC,KAAKkC,OAAOC,QAAQ,kBAAkBF,QAChD0H,EAAO,CACXC,IAAmB5J,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAMwK,EAAAA,KACxEC,KAAmB/J,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM0K,EAAAA,KACxEC,eAAmBjK,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM4K,EAAAA,KACxE9H,KAAmBpC,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAIC,MAC5E6H,SAAmBnK,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAI+H,UAC5EC,OAAmBrK,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAIiI,QAC5EC,SAAmBvK,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAImI,aAC5EC,UAAmBzK,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAIqI,cAC5EC,kBAAmB3K,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAMsL,EAAAA,KACxEC,KAAmB7K,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAIyI,MAC5EC,MAAmB/K,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAI2I,OAC5EC,IAAmBjL,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAI6I,KAC5E7E,QAAmBrG,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAMgH,EAAAA,KACxE6E,OAAmBnL,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAI+I,UAC5EC,iBAAmBrL,KAAKkC,OAAO2H,SAAS,GAAI5H,SAAiB,CAAE3C,KAAMgM,EAAAA,GAASC,SAAUvJ,GAAImH,KAG1FnJ,KAAKkC,OAAOC,QAAQ,GAAIF,eAAsBuJ,EAAAA,MAChD7B,EAAK8B,MAAQzL,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAMkM,EAAAA,MAGhExL,KAAKkC,OAAOC,QAAQ,GAAIF,eAAsBI,EAAAA,GAAIqJ,mBACpD/B,EAAKgC,gBAAkB3L,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAIqJ,mBAG9E1L,KAAKkC,OAAOC,QAAQ,GAAIF,eAAsBI,EAAAA,GAAIuJ,eACpDjC,EAAKgC,gBAAkB3L,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAM+C,EAAAA,GAAIuJ,eAG9E5L,KAAKkC,OAAOC,QAAQ,GAAIF,eAAsBqJ,EAAAA,GAASO,WACzDlC,EAAKmC,gBAAkB9L,KAAKkC,OAAO2H,SAAS,GAAI5H,YAAoB,CAAE3C,KAAMgM,EAAAA,GAASO,WAGvF,MAAME,QAAYC,EAAAA,EAAAA,IAAQrC,GAEpBsC,IAAiBjM,KAAKkC,OAAOC,QAAQ,GAAIF,eAAsBI,EAAAA,GAAI6J,YACnEC,IAAsBnM,KAAKkC,OAAOC,QAAQ,GAAIF,eAAsBI,EAAAA,GAAI+J,kBAExEC,EAAgBN,EAAIZ,OAAOmB,QAAO,CAACC,EAAKC,KAAU,IAAMD,EAAK,CAACC,EAAM3L,MAAO2L,EAAM/J,MAAMgK,WAAY,CAAC,GAE1GzM,KAAK0M,WAAaT,GAAgBI,EAAcjB,EAAAA,GAAQuB,uBACxD3M,KAAK4M,gBAAkBT,GAAqBE,EAAcjB,EAAAA,GAAQuB,wBAA0BN,EAAcjB,EAAAA,GAAQyB,iCACpH,EAEAhN,IAAAA,GACE,MAAMiN,EAAU9M,KAAK+M,WAAaC,EAAAA,GAElC,MAAO,CACL/J,KACA6J,UACArK,KAA+B,KAC/BU,OAA+B,QAC/B8J,OAA+B,GAC/BC,sBAAqB,KACrBC,oBAA+B,UAC/BC,cAAa,KACbC,YAA+B,iBAC/BC,cAA+B,EAC/BC,iBAA+B,GAC/BC,kBAA+B,EAC/BC,cAA+B,GAC/BrM,WAA+B,GAC/BsM,QAA+B,GAC/BC,SAA+B,GAC/BC,YAA+B,GAC/BC,YAA+B,GAC/BtH,WAA+B,GAC/BC,UAA+B,KAC/BsH,cAA+B,EAC/BC,aAA+B,EAC/BC,OAA+B,KAC/B1I,IAA+B,GAC/B2I,eAA+B,KAC/BpH,kBAA+B,GAC/BqH,YAA+B,EAC/BC,YAA+B,EAC/BC,2BAA+B,EAC/BC,2BAA+B,EAC/BjJ,YAA+B,EAC/BkJ,mBAA+B,GAC/BnI,yBAA+B,EAC/BC,4BAA+B,EAC/BsG,YAA+B,EAC/BE,iBAA+B,EAC/B2B,cAA+BvO,KAAK+M,WAAayB,EAAAA,GAAUA,EAAAA,GAAUC,EAAAA,GACrEC,8BAA+B,GAC/BC,YAA+B,EAEnC,EAEAC,SAAU,CACR3M,OAAAA,GACE,OAAOjC,KAAKkC,OAAOC,QAAQ,kBAAkBF,OAC/C,EAEAoI,MAAAA,GACE,OAAOrK,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgBI,EAAAA,GAAIiI,MAC1D,EAEAC,QAAAA,GACE,OAAOvK,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgBI,EAAAA,GAAImI,WAC1D,EAEAC,SAAAA,GACE,OAAOzK,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgBI,EAAAA,GAAIqI,YAC1D,EAEAX,IAAAA,GACE,OAAO/J,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgB+H,EAAAA,GACtD,EAEA3D,OAAAA,GACE,OAAOrG,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgBqE,EAAAA,GACtD,EAEAuI,kBAAAA,GACE,OAAO7O,KAAKkC,OAAOC,QAAQ,iBAAiB2M,EAAAA,IAAWC,QAAQC,IAAeA,EAAUC,UAC1F,EAEAxD,KAAAA,GACE,OAAOzL,KAAKkC,OAAOC,QAAQ,iBAAiBqJ,EAAAA,GAC9C,EAEA0D,cAAAA,GACE,MAAMzD,EAAQzL,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgBuJ,EAAAA,IAErD2D,EAAenP,KAAK4N,YAAY/L,KAAKuN,GAAMA,EAAEC,cAC7CC,EAAatP,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgB2I,EAAAA,IAC1D2E,EAAqBJ,EAAatN,KAAKhB,GAASyO,EAAW/M,MAAM6M,GAAMA,EAAEpN,KAAOnB,MAAOkO,QAAQK,GAAMA,GAAGpN,KACxG2J,GAAkB6D,EAAAA,EAAAA,IAAKD,EAAmB1N,KAAKuN,GAAMA,EAAEK,wBAAwBzN,MAErF,OAAOyJ,EAAMsD,QAAQW,IAAOA,EAAEC,iBAAgC,SAAbD,EAAEE,SAAmB/N,KAAKgO,IACzE,MAAMC,EAAmB,GACzB,IAAIC,GAAoB,EAcxB,OAZIpE,EAAgB/C,OAAS,GAC3B+C,EAAgB9J,KAAKmO,IACnBF,EAAiB5G,KAAK,2BAA4B8G,IAAkB,IAIxEF,EAAiBjO,KAAKoO,IAC6B,SAA7CJ,EAAK/M,UAAUC,SAASkN,KAC1BF,GAAoB,EACtB,IAGK,CACLhR,MAAUgR,EAAoBF,EAAKK,YAAc,GAAIL,EAAKK,gBAAkBlQ,KAAKmQ,EAAE,4DACnF1R,MAAUoR,EAAK7N,GACfoO,UAAWL,EACZ,GAEL,EAEAM,mBAAAA,GACE,IACE,MAAMC,EAAoBtQ,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgBI,EAAAA,GAAI+H,SAAS7H,MAAOC,GAAMA,EAAER,KAAOuO,EAAAA,GAAYC,yBAAwB/R,MAE9I,OAAOsI,KAAKC,MAAMsJ,EACpB,CAAE,MAAOxM,GACP,MAAO,CAAC,CACV,CACF,EAEA2M,gBAAAA,GACE,OAAOzQ,KAAKqQ,oBAAoBK,YAAcC,EAAAA,GAAYC,KAC5D,EAEAC,gBAAAA,GACE,OAAO7Q,KAAKqQ,oBAAoBS,aAAe,eACjD,EAEAC,SAAAA,GACE,MAAuB,YAAhB/Q,KAAKmD,MACd,EAEA6N,aAAAA,GAEE,OAAOhR,KAAKyJ,eAAiBpH,EAAAA,GAAImI,YAAcxK,KAAKiR,QACtD,EAEAC,yBAAAA,GACE,MAAMC,EAAUnR,KAAKkC,OAAOC,QAAQ,GAAInC,KAAKiC,eAAgBI,EAAAA,GAAI+H,SAAS7H,MAAOC,GAAMA,EAAER,KAAOuO,EAAAA,GAAYa,yBAA0B,CAAC,EAEvI,OAAOC,OAAOF,GAAS1S,OAAS0S,GAAS3R,QAC3C,EAEA8R,cAAAA,GACE,MAAO,CACLC,oBAA0BvR,KAAKmQ,EAAE,sDACjCqB,yBAA0B,CACxBxR,KAAKmQ,EAAE,sDACPnQ,KAAKmQ,EAAE,8CACPnQ,KAAKmQ,EAAE,oEAETsB,SAAwBzR,KAAKmQ,EAAE,8CAC/BuB,uBAAwB1R,KAAKmQ,EAAE,6DAEnC,GAGF,aAAMwB,SACE3R,KAAKkC,OAAO2H,SAAS,GAAI7J,KAAKiC,kBAAoB,CAAE3C,KAAMgH,EAAAA,KAChEtG,KAAK4R,cAAc,CAAEnT,MAAOuB,KAAKvB,MAAOoT,KAAM7R,KAAKiR,UACrD,EAEA/P,QAAS,CACP0Q,aAAAA,CAAcE,GACZ,MAAM,MACJrT,EAAK,cAAEsT,EAAa,aAAEC,GAAe,EAAK,KAAEH,GAAO,GACjDC,EAEEjP,EAAK7C,KAAKyJ,eAAiBpH,EAAAA,GAAI6I,GAAKzM,EAAQuB,KAAKyJ,eAAiBpH,EAAAA,GAAI4P,OAASjS,KAAKvB,MAAMyT,QAAQ/K,OAAS1I,EAAMgE,KAAKI,GACtHsP,EAAgBnS,KAAKyJ,eAAiBpH,EAAAA,GAAI4P,OAASjS,KAAKvB,MAAMyT,QAAQC,cAAgB,KAEtF1P,EAAOI,GAAIJ,KAEjB,IAAKA,EACH,OAEF,MAAM2P,EAAY3P,EAAK6B,SAAS7B,KAAK8B,OAAO6N,YAGvCA,GAAWC,QAAWD,GAAWC,SAAWD,GAAWC,QAAQrE,QAAwC,OAA9BoE,GAAWC,QAAQrE,UAC/FvL,EAAK6B,SAAS7B,KAAK8B,OAAO6N,UAAY,IACjC3P,EAAK6B,SAAS7B,KAAK8B,OAAO6N,UAC7BC,OAAQ,IACH5P,EAAK6B,SAAS7B,KAAK8B,OAAO6N,UAAUC,OACvCrE,OAAQvL,EAAK6B,SAAS7B,KAAK8B,OAAO6N,UAAUE,SAAStE,UAKtDnL,EAAGC,SAASC,SACfF,EAAGC,SAASC,OAAS,CAAC,GAExB,MAAMoK,EAAsBtK,EAAGC,SAASC,SAASC,EAAAA,EAAgBuP,+BAAiC,UAE5FlF,EAAc5K,EAAK4K,aAAe,iBAClCQ,EAAcpP,EAAMoP,YACpBvI,EAAM7C,EAAK6B,SAAS7B,KAAK8B,QAAQe,KAAKkN,MACtCxE,EAASvL,EAAK6B,SAAS7B,KAAK8B,OAAO6N,UAAUC,OAAOrE,OACpDC,EAAiBpL,EAAGC,UAAUgE,cAAc9D,EAAAA,EAAgByP,oBAC5D/D,EAAgCjM,EAAK6B,SAAS7B,MAAMiM,+BAAiC1O,KAAKkR,0BAE1FjE,EAASjN,KAAKgI,qBAAqBvF,IAAS,GAE5CiL,EAAU1N,KAAK6H,eAAehF,IAAO,GACrC8K,EAAW3N,KAAK0S,YAAY7P,EAAIsP,GAEhCvE,EAAc5N,KAAK2S,eAAe9P,EAAI,CAAEmP,eAAcH,SACtDtE,EAAmBvN,KAAK4S,qBAAqBnQ,IAAS,GAE5D,IAAI,SAAEkD,EAAoB,YAAEG,GAA4B9F,KAAKwF,oBAAoB/C,GAEjF,GAAIzC,KAAKyJ,eAAiBpH,EAAAA,GAAI4P,OAAQ,CACpC,MAAMY,EAAgB7S,KAAKvB,MAAMyT,QAAQW,cAEzC,GAAIA,EAAe,CACjB,MAAMC,EAAoBD,EAAc,IAAIhT,MAAMkG,aAAe,GAC3DgN,EAAiBF,EAAc,IAAIhT,MAAMgG,UAAY,GAE3DF,GAAWqN,EAAAA,EAAAA,GAAaD,GACxBjN,GAAckN,EAAAA,EAAAA,GAAaF,EAC7B,CACF,CACA,MAAM3P,EAASnD,KAAK4C,UAAUC,IAAO,QAErC8C,GAAW3F,KAAKiR,UAAac,GAAkB/R,KAAK8M,QAA6CnH,EAAnC3F,KAAKiT,gBAAgB,CAAE9P,WAErF,MAAMqK,EAAmBxN,KAAKoE,mBAAmB3B,GAC3C6K,EAAetN,KAAK0D,gBAAgBiC,EAAUxC,GAAQ,GACtD+K,EAAalO,KAAK0E,aAAajC,GAC/B0L,EAAanO,KAAK8E,aAAarC,GAC/B2L,EAA4BpO,KAAKgF,4BAA4BvC,GAC7D4L,EAA4BrO,KAAKkF,4BAA4BzC,GAC7D2C,EAAapF,KAAKmF,aAAa1C,GAC/BkM,EAAa3O,KAAKqF,aAAa5C,GAE/B+D,EAAYxG,KAAK0F,UAAUjD,GAC3BoE,EAAoB7G,KAAK2G,qBAAqBlE,GAEhDhD,OAAOyT,UAAUC,eAAeC,KAAK3Q,EAAM,oBACtCA,EAAK4Q,QACZ5Q,EAAK4K,YAAc,kBAGrBrN,KAAK,QAAUyC,EACfzC,KAAK,uBAAyBmN,EAC9BnN,KAAK,eAAiBqN,EACtBrN,KAAK,aAAewG,EACpBxG,KAAK,qBAAuB6G,EAC5B7G,KAAK,cAAgB2F,EACrB3F,KAAK,iBAAmB8F,EAExB9F,KAAK,UAAYiN,EACjBjN,KAAK,UAAYmD,EACjBnD,KAAK,gBAAkBsN,EAEvBtN,KAAK,OAASsF,EACdtF,KAAK,UAAYgO,EACjBhO,KAAK,kBAAoBiO,EACzBjO,KAAK,eAAiB6N,EACtB7N,KAAK,iCAAmC0O,EAExC1O,KAAK,oBAAsBwN,EAC3BxN,KAAK,cAAgBkO,EACrBlO,KAAK,6BAA+BqO,EACpCrO,KAAK,cAAgBmO,EACrBnO,KAAK,6BAA+BoO,EACpCpO,KAAK,cAAgBoF,EACrBpF,KAAK,cAAgB2O,EAErB3O,KAAK,oBAAsBuN,EAC3BvN,KAAK,eAAiB4N,EACtB5N,KAAK,WAAa0N,EAElB1N,KAAK,YAAc2N,EAEnB3N,KAAKsT,mBACP,EAEAZ,WAAAA,CAAY7P,EAAI0Q,GACd,MAAMvE,EAAYnM,EAAGC,SAASkM,UACxBwE,EAAW3Q,EAAGJ,KAAK6B,SAAS7B,KAAKwD,SAAW,GAC5CwN,EAAS5Q,EAAGJ,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQkP,OAAS,GACvDC,GAAwB7L,EAAAA,EAAAA,GAA0BjF,GAExD,IAAIwE,EAAM,GAEV,GAAsB,IAAlBoM,EAAO7K,OAAc,CACvB,IAAIhI,EAAM,SACNtB,EAAOgK,EACPsK,EAAO,OAEX,MAAMC,EAAgB7T,KAAKqK,OAAO9H,MAAOuR,GAAM9T,KAAK0N,UAAYoG,EAAE9R,KAE5D+R,EAAa,QAAQC,KAAKH,GAAeI,aACzCC,EAAYC,KAAKC,IAAIP,GAAe3B,QAAQ0B,KAAMC,GAAe3B,QAAQmC,aACzEC,EAAcT,GAAeS,cAAe,EAC5CnC,EAAgBoB,GAAYhR,MAAMgS,GAAmC,WAAvBA,EAAQC,cAA4B,KAOxF,GALIT,IACFnT,EAAM,OACNtB,EAAO+J,GAGL6K,EAAW,CACb,IAAIO,EAAeN,KAAKO,KAAKR,EAAY,KAAO,KAAO,MAElDH,IACHU,EAAeN,KAAKC,IAAIK,EAAc,KAExCb,EAAO,GAAIa,IAAiBE,EAAAA,IAC9B,CAEAtN,EAAI6B,KAAK,CACPlH,IAAkB4S,EAAAA,EAAAA,IAAU,GAC5BzN,OAAkB0N,EAAAA,GAAYvK,MAC9BzJ,KAAkB,SAClBiU,WAAkB,gBAClBlU,MACA4T,WAAkB,GAClBZ,OACAtU,OACAyV,iBAAkB,GAClBC,MAAkBhV,KAAK0N,QACvBgD,WAAkBC,EAAAA,GAAYC,MAC9B0D,cACAnC,iBAEJ,MACE9K,EAAMoM,EAAO5R,KAAK,CAACoT,EAAMC,KACvB,MAAMC,EAAS3B,EAASjR,MAAO2D,GAAMA,EAAErF,OAASoU,EAAKpU,OAErD,IAAI+S,EAAO,GACPoB,EAAQ,GACR7N,EAAS,GACTiO,EAAW,GACXC,EAAY,GACZb,EAAa,GACbM,EAAa,GACbpE,EAAa,GACbqE,EAAmB,GACnBO,GAAe,EACfC,EAAa,KAEjB,MAAMjW,EAAO2V,GAAMO,MAAQnM,EAAS4L,GAAMQ,KAAOnM,EAAY,GAO7D,GALI6L,GAAQO,gBACVvO,EAAS0N,EAAAA,GAAYc,UACrBN,EAAYF,EAAOO,cAAcV,OAG/BG,EAAOS,uBAAyBT,EAAOS,uBAAuBC,UAAW,CAC3ErB,EAAaW,EAAOS,sBAAsBC,UAC1C,MAAMC,EAAMnC,EAAsBpR,MAAOwT,GAAMA,EAAEjT,SAASjC,OAAS2T,IAInE,GAFAY,EAAWZ,EAEPsB,EAAK,MAEuDnT,IAA1DmT,EAAIhT,UAAUgE,cAAc9D,EAAAA,EAAgB+E,WAC9CiN,EAAQc,EAAIhT,UAAUgE,cAAc9D,EAAAA,EAAgB+E,UACpDZ,EAAS0N,EAAAA,GAAYvK,OAErBnD,EAAS0N,EAAAA,GAAYmB,IAGvB,MAAMC,EAAoBH,GAAKrT,MAAQ,CAAC,EAExCiO,EAAauF,GAAmBvF,WAChCoE,EAAamB,GAAmBnF,cAAc,GAC9C8C,EAAOqC,GAAmB7D,WAAWE,UAAU4D,SAAW,OAC1DnB,EAAmBkB,GAAmBlB,iBACtCQ,EAAaU,GAAmBV,UAClC,KAAO,CAGL,MAAMY,EAAUnW,KAAKkC,OAAOC,QAAQ,iBAAiB6H,EAAAA,IAC/CoM,EAAcD,EAAQ5T,MAAOC,GAAMA,EAAER,KAAO,GAAIgN,KAAemG,GAAQS,uBAAuBC,cAEpG1O,EAAS0N,EAAAA,GAAYwB,cACrBvB,EAAasB,GAAa3T,MAAMqO,cAAc,IAAM,gBACpD8C,EAAOwC,GAAa3T,MAAM2P,WAAWE,UAAU4D,SAAW,OAC1DnB,EAAmBqB,GAAa3T,MAAMsS,iBACtCrE,EAAa0F,GAAa3T,MAAMiO,YAAcC,EAAAA,GAAYC,MAC1D4D,EAAa4B,GAAatT,UAAUjC,MAAQ,EAC9C,CAEAyU,EAAeH,EAAOS,sBAAsBN,eAAgB,CAC9D,CAEA,MAAM1U,EAAMqU,GAAMQ,MAAM7U,KAAOqU,GAAMO,OAAO5U,IAEtC0V,EAAYrB,GAAMqB,UAAYrB,GAAMqB,UAAYpB,EAEhDqB,GAAaC,EAAAA,EAAAA,IAAQ5C,GAErB6C,GAAaC,EAAAA,EAAAA,IAASH,EAAY,CACtCI,UAAa,KACbC,WAAa,EACbC,YAAa,EACbC,YAAa,IAGTC,EAAM/W,KAAK+J,KAAKxH,MAAMyU,GAAMA,EAAEhV,KAAO,GAAIhC,KAAKvB,MAAMqE,SAASkM,aAAewF,MAE5EyC,EAAeF,GAAKG,WAAWpU,UAAUgE,cAAc9D,EAAAA,EAAgBmU,cAEvE7C,EAAcyC,GAAKzC,cAAe,EAClCnC,EAAgBoB,GAAYhR,MAAMgS,GAAYA,EAAQC,aAAeS,EAAKpU,QAAS,KAEzF,MAAO,CACLmB,IAAY4S,EAAAA,EAAAA,IAAU,GACtB0B,YACAnP,SACAtG,KAAYoU,EAAKpU,KACjBuU,WACAxU,MACA4T,aACAa,YACAP,aACAlB,KAAY,GAAI6C,IAAe9B,EAAAA,KAC/BjE,WAAYA,GAAc1Q,KAAKyQ,iBAC/BuE,QACA1V,OACAyV,mBACAO,eACA2B,eACA1B,aACAvG,YACAsF,cACAnC,gBACD,IAML,OAFA9K,GAAM+P,EAAAA,EAAAA,IAAO/P,EAAK,aAEXA,EAAI0H,QAASvM,GAAiB,kBAAXA,EAAE3B,MAC9B,EAEA8R,cAAAA,CAAe9P,EAAIiP,GACjB,MAAM,aAAEE,GAAe,EAAK,KAAEH,GAAO,GAAUC,EAEzCuF,EAAWxU,EAAGJ,KAAK6B,SAAS7B,KAAK4U,UAAY,GAC7CC,EAAazU,EAAGJ,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQ8S,YAAc,GAEhEjQ,EAAMiQ,EAAWzV,KAAK,CAACiS,EAAGoB,KAC9B,MAAMqC,EAAUF,EAAS9U,MAAOmN,GAAMoE,EAAEjT,OAAS6O,EAAE7O,OAE7CvB,EAAOwU,EAAE0D,MAAQ,QAAU1D,EAAE2D,OAAS,SAAW,aAEjDC,IAAUH,EAAQI,IAExB,MAAO,IACF7D,EACHoB,QACA5V,OACAoY,QACAE,eAAc5F,IAAgBH,KAAQ+C,EAAAA,EAAAA,IAAU,IAChDiD,MAAa/D,EAAE+D,MACfxI,YAAaqI,EAAQtO,EAAqBmO,GAASO,QAAQzI,YAC5D,IAGH,OAAOhI,CACT,EAEA0Q,OAAAA,GACE/X,KAAK2F,SAAW3F,KAAKgY,YAAY,CAAE7U,OAAQnD,KAAKmD,OAAQmK,aAActN,KAAKsN,eAC3EtN,KAAKiY,aACLjY,KAAKkY,yBACLlY,KAAKmY,iBAAiBnY,KAAK4N,aAC3B5N,KAAKoY,cAAcpY,KAAK2N,SAC1B,EAEAsK,UAAAA,GACOjY,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAO8T,QAGlCrY,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAO8T,QAAQ,QAAUrY,KAAK6N,YAFtD7N,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAO,WAAa,CAAEjF,KAAMU,KAAK6N,aAK3D7N,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOe,IAAIkN,MAAQxS,KAAKsF,IAChDtF,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAO6N,UAAUC,OAAO/M,IAAMtF,KAAKsF,IAAMtF,KAAKsF,IAAIgT,WAAatY,KAAKsF,IAC5FtF,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAO6N,UAAUC,OAAOrE,OAAShO,KAAKgO,OAC9DhO,KAAKyC,KAAK6B,SAAS7B,KAAKiM,8BAAgC1O,KAAK0O,8BAG7D,MAAM7L,EAAK7C,KAAKyJ,eAAiBpH,EAAAA,GAAI6I,GAAKlL,KAAKvB,MAAQuB,KAAKvB,MAAMgE,KAAKI,GAElE7C,KAAKiO,eAGRpL,EAAGC,SAASgE,YAAY9D,EAAAA,EAAgByP,oBAAsBzS,KAAKiO,sBAF5DpL,EAAGC,SAASgE,YAAY9D,EAAAA,EAAgByP,oBAKhB,YAA7BzS,KAAKmN,2BACAtK,EAAGC,SAASC,OAAOC,EAAAA,EAAgBuP,8BAE1C1P,EAAGC,SAASC,OAAOC,EAAAA,EAAgBuP,8BAAgCvS,KAAKmN,mBAE5E,EAEAiL,aAAAA,CAAc3C,GACZ,MAAM/B,EAAQ,GACRzN,EAAU,GACVsS,EAAiB,GACjBC,EAAuB,GAgC7B,GA9BA/C,EAAKlS,SAAS,CAACkV,EAAGvD,KAChB,MAAMwD,EAAa1Y,KAAKvB,MAAMqE,UAAUjC,MAAQ,GAEhD,IAAI8X,EAAiB,GAGnBA,EADEF,EAAEtR,SAAW0N,EAAAA,GAAYwB,cACVoC,EAAEjE,WACVxU,KAAK8M,UAAY9M,KAAKuN,iBAAiB5L,SAAS8W,EAAErD,UAC1C,GAAIsD,KAAgBD,EAAE5X,SAAU+T,EAAAA,EAAAA,IAAU,GAAGgE,gBAE7CH,EAAErD,SAGrB,MAAMyD,EAAQ7Y,KAAK8Y,UAAUL,EAAGvD,GAC1B6D,EAAU/Y,KAAKgZ,YAAYP,EAAGE,GAC9BM,EAAsBjZ,KAAKkZ,yBAAyBT,EAAGE,GAE7DjF,EAAMxK,KAAK2P,GACX5S,EAAQiD,KAAK6P,GACbR,EAAerP,KAAKyP,GAEhBF,EAAEtR,SAAW0N,EAAAA,GAAYc,WAC3B6C,EAAqBtP,KAAK+P,EAC5B,IAGGjZ,KAAKuG,aAAcvG,KAAKgR,gBAC3BhR,KAAKuG,WAAavG,KAAKmZ,mBAAmBnZ,KAAKoZ,oBAG5C1F,EAAMnR,MAAO8W,GAAiB,kBAAXA,EAAExY,SAA8Bb,KAAK2F,UAAY3F,KAAK8F,eACvE9F,KAAK+Q,UAAW,CACnB2C,EAAMxK,KAAK,CACTrI,KAAM,gBACN4U,KAAM,CAAE7U,IAAK,YAGf,MAAM+E,EAAW3F,KAAKgY,YAAY,CAAE7U,OAAQnD,KAAKmD,OAAQmK,aAActN,KAAKsN,eAEtEgM,EAAgB,CACpBzY,KAAkB,gBAClBmF,iBAAkB,CAAC,GAGjBhG,KAAKmG,wBACPmT,EAActT,iBAAiBL,SAAWA,EAE1C2T,EAActT,iBAAiBQ,UAAY,CAAE3F,KAAMb,KAAKuG,YAGtDvG,KAAKoG,2BACPkT,EAActT,iBAAiBF,YAAc9F,KAAKyN,cAElD6L,EAActT,iBAAiBS,qBAAuB,CAAE5F,KAAMb,KAAKuG,YAGrEN,EAAQiD,KAAKoQ,EACf,CAGF,IAAI7W,EAAO,IACNzC,KAAKyC,KACR4K,YAAarN,KAAKqN,YAClB/I,SAAa,IACRtE,KAAKyC,KAAK6B,SACbxB,SAAU,IACL9C,KAAKyC,MAAM6B,UAAUxB,SACxBgE,YAAa,IACR9G,KAAKyC,MAAM6B,UAAUxB,UAAUgE,YAClC,CAAC9D,EAAAA,EAAgBkF,WAAYnB,KAAKwS,UAAUvZ,KAAKiN,SAEnDlK,OAAQ,IACH/C,KAAKyC,MAAM6B,UAAUxB,UAAUC,OAClC,CAACC,EAAAA,EAAgBwW,SAAUxZ,KAAKvB,OAAOqE,UAAUjC,OAGrD4B,KAAM,IACDzC,KAAKyC,KAAK6B,UAAU7B,KACvB8B,OAAQ,IACHvE,KAAKyC,KAAK6B,UAAU7B,MAAM8B,OAC7BC,QAAS,IACJxE,KAAKyC,KAAK6B,UAAU7B,MAAM8B,QAAQC,QACrCkP,UAGJzN,aAKiB,IAAnBA,EAAQ2C,eACHnG,EAAK6B,SAAS7B,KAAKwD,QAGxBjG,KAAKyJ,eAAiBpH,EAAAA,GAAI6I,IACvBlL,KAAKyZ,WACRhX,EAAOzC,KAAK0Z,iBAAiBjX,IAG/BzC,KAAKvB,MAAMqE,SAAS,eAAiB,IAChC9C,KAAKvB,MAAMqE,SAASgE,YACvB,CAAC9D,EAAAA,EAAgB2W,uBAAwB5S,KAAKwS,UAAUf,GACxD,CAACxV,EAAAA,EAAgB4W,aAAwB7S,KAAKwS,UAAUvZ,KAAKvB,MAAMob,aAGrE7Z,KAAKvB,MAAMqE,SAAS,UAAY,IAC3B9C,KAAKvB,MAAMqE,SAASC,OACvB,CAACC,EAAAA,EAAgB8W,SAAU,YAC3B,CAAC9W,EAAAA,EAAgBC,IAAUjD,KAAKmD,QAGlCnD,KAAKvB,MAAM,QAAUgE,EACrBzC,KAAK,QAAUyC,GACNzC,KAAKyJ,eAAiBpH,EAAAA,GAAImI,aACnCxK,KAAKvB,MAAMgE,KAAKI,GAAG,QAAUJ,EAC7BzC,KAAKvB,MAAMgE,KAAKI,GAAGC,SAAS,eAAiB,IACxC9C,KAAKvB,MAAMgE,KAAKI,GAAGC,SAASgE,YAC/B,CAAC9D,EAAAA,EAAgB2W,uBAAwB5S,KAAKwS,UAAUf,IAE1DxY,KAAKvB,MAAMgE,KAAKI,GAAGC,SAAS,UAAY,IACnC9C,KAAKvB,MAAMgE,KAAKI,GAAGC,SAASC,OAC/B,CAACC,EAAAA,EAAgBC,IAAKjD,KAAKmD,QAE7BnD,KAAK,QAAUyC,EAEnB,EAEAsX,oBAAAA,CAAqBC,GACnB,MAAOA,EAAIC,SAAS,KAClBD,EAAMA,EAAIE,MAAM,GAAI,GAGtB,OAAOF,CACT,EAEAN,gBAAAA,CAAiBjX,GACf,MAAM0X,EAAana,KAAK+Z,qBAAqB/Z,KAAKma,YAElD1X,EAAK6B,SAASxB,SAASC,OAAOC,EAAAA,EAAgBoX,gBAAkBD,EAEhE,MAAME,EAAO,CACXC,OAAiB,EACjBC,gBAAiB,CACfC,YAAeC,EAAAA,GACfC,cAAe,CAAEC,YAAa,CAAE,CAAC3X,EAAAA,EAAgBoX,gBAAiBD,MAItE,MAAO,IACF1X,EACH6B,SAAU,IACL7B,EAAK6B,SACR7B,KAAM,IACDA,EAAK6B,SAAS7B,KACjBmY,SAAU,IACLnY,EAAK6B,SAAS7B,KAAKmY,SACtBC,gBAAiB,IACZpY,EAAK6B,SAAS7B,MAAMmY,UAAUC,gBACjCC,gDAAiD,IAC3CrY,EAAK6B,SAAS7B,MAAMmY,UAAUC,iBAAiBC,iDAAmD,GACtGT,OAOd,EAEAlC,gBAAAA,CAAiB4C,GACf,MAAM1D,EAAW,GACXC,EAAa,GAEnByD,EAAWxX,SAAUkV,IACnB,MAAMuC,EAAWhb,KAAKib,aAAaxC,GAC7ByC,EAAalb,KAAKmb,eAAe1C,GAEvCpB,EAASnO,KAAK8R,GACd1D,EAAWpO,KAAKgS,EAAW,IAG7B,MAAMzY,EAAO,IACRzC,KAAKyC,KAAK6B,SAAS7B,KACtB8B,OAAQ,IACHvE,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAC3BC,QAAS,IACJxE,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAClC8S,eAGJD,YAGFrX,KAAKyC,KAAK6B,SAAS,QAAU7B,CAC/B,EAEAyV,sBAAAA,GACE,MAAM7Q,EAAM,GACNP,EAAc,CAAC,EACfU,EAAQT,KAAKC,MAAMhH,KAAKyC,MAAM6B,UAAUxB,UAAUgE,cAAc9D,EAAAA,EAAgBoY,wBAA0B,MAEhH,IAAK,MAAMlc,KAAOc,KAAK6G,kBACjB7G,KAAKgR,gBACP9R,EAAIqH,WAAavG,KAAKmZ,mBAAmBnZ,KAAKoZ,mBAG5Cla,EAAIiI,SAAWkU,EAAAA,GAAmBC,YACpC9T,EAAM0B,KAAKhK,EAAIoI,UACfD,EAAI6B,KAAK,CACP9B,aAAc,CACZD,OAAmB,CAAE1B,OAAQ,CAAEc,WAAYrH,EAAIqH,aAC/CoB,kBAAmB,CAAEC,eAAgB,CAAE,OAKzC1I,EAAIiI,SAAWkU,EAAAA,GAAmBE,aACpC/T,EAAM0B,QAAQhK,EAAIsI,OAClBV,EAAY5H,EAAIqH,YAAcrH,EAAIuI,QAClCJ,EAAI6B,KAAK,CACPsS,aAAc,CACZrU,OAAmB,CAAE1B,OAAQ,CAAEc,WAAYrH,EAAIqH,aAC/CoB,kBAAmB,CAAEC,eAAgB,CAAEJ,MAAOtI,EAAIsI,YAMvC,IAAfH,EAAIuB,QAAkB5I,KAAKyC,KAAK6B,SAAS7B,KAAKoE,yBACzC7G,KAAKyC,KAAK6B,SAAS7B,KAAKoE,kBAE/B7G,KAAKyC,KAAK6B,SAAS7B,KAAKoE,kBAAoBQ,EAGzB,IAAjBG,EAAMoB,SACR5I,KAAKyC,KAAK6B,SAASxB,SAASgE,YAAY9D,EAAAA,EAAgBoY,uBAAyBrU,KAAKwS,UAAUtV,MAAMwX,KAAK,IAAIC,IAAIlU,KACnHxH,KAAKyC,KAAK6B,SAASxB,SAASgE,YAAY9D,EAAAA,EAAgBiE,uBAAyBF,KAAKwS,UAAUzS,GAEpG,EAEA6U,iCAAAA,CAAkCC,GAChC,OAAO5b,KAAKmQ,EAAE,wDAAyDyL,EAAI7c,OAAS6c,IACtF,EAEA3I,eAAAA,CAAgBnB,GACd,MAAM1O,EAAYpD,KAAKkD,YAAY4O,EAAO3O,QAEpCkE,EAAMxD,IAAAA,KAAYT,GAExB,MAAO,kBAAmBiE,GAC5B,EAOA2Q,WAAAA,CAAYlG,GACV,IAEE,IAAIzQ,EAAcrB,KAAKoB,WAAaE,EAAAA,GAAAA,cAAmBtB,KAAKoB,YAAcE,EAAAA,GAAAA,cAAmB,CAAC,GAE9F,MAAMua,EAAuB7b,KAAK8b,uBAAuB9b,KAAKoB,YAE1Dya,EAAqBjT,OAAS,EAChCvH,EAAY0a,MAAM,CAAC,uBAAwBF,GAClCva,EAAAA,GAAAA,aAAkBD,EAAY2a,MAAM,yBAC7C3a,EAAY4a,SAAS,CAAC,wBAGxB5a,EAAcyQ,EAAOxE,aAAetN,KAAKkc,SAAS,CAAE7a,iBAAgByQ,IAAY9R,KAAKmc,UAAU,CAAE9a,iBAAgByQ,IACjH,MAAMsK,EAAe/a,EAAYiX,WAEjC,GAAqB,SAAjB8D,EAEF,OAGF,OAAOA,CACT,CAAE,MAAOtY,GAGP,OAFAuY,EAAQC,MAAM,uCAAwCxY,GAE/C9D,KAAKoB,UACd,CACF,EAEAmb,YAAAA,CAAaC,GACXxc,KAAK,UAAYwc,CACnB,EAEAC,eAAAA,CAAgBnX,EAAK0I,GACnBhO,KAAK,OAASsF,EACdtF,KAAK,UAAYgO,CACnB,EAEA8K,SAAAA,CAAUL,EAAGvD,GACX,MAAM7N,EAAM,CAAExG,KAAM4X,EAAE5X,MAUtB,OARI4X,EAAEnZ,OAASgK,EACbjC,EAAIoO,KAAO,CAAE7U,IAAK6X,EAAE7X,KACX6X,EAAEnZ,OAAS+J,IACpBhC,EAAImO,MAAQ,CAAE5U,IAAK6X,EAAE7X,MAGvByG,EAAIiP,UAAYpB,EAAQ,EAEjB7N,CACT,EAEA2R,WAAAA,CAAYP,EAAGE,GACb,MAAMtR,EAAM,CAAExG,KAAM4X,EAAE5X,MAWtB,OATI4X,EAAEtR,SAAW0N,EAAAA,GAAYc,UAC3BtO,EAAIqO,cAAgB,CAAEV,MAAOyD,EAAEpD,WACtBoD,EAAEtR,SAAW0N,EAAAA,GAAYvK,OAASmO,EAAEtR,SAAW0N,EAAAA,GAAYmB,KAAOyC,EAAEtR,SAAW0N,EAAAA,GAAYwB,gBACpGhP,EAAIuO,sBAAwB,CAAEC,UAAW8C,GACrCF,EAAEnD,eACJjO,EAAIuO,sBAAsBN,cAAe,IAItCjO,CACT,EAEA6R,wBAAAA,CAAyBT,EAAGE,IACrBpZ,OAAOkZ,EAAE7E,MAAMjS,SAAS,OAAS8W,EAAE7E,OACtC6E,EAAE7E,KAAO,GAAI6E,EAAE7E,OAASe,EAAAA,MAG1B,MAAMtN,EAAM,CACVvE,SAAU,CAAEjC,KAAM8X,GAClBlW,KAAU,CACRqO,YAAa,CAAC2H,EAAE3D,YAChB1C,UAAa,CAAEE,SAAU,CAAE4D,QAASuC,EAAE7E,OACtClD,WAAa+H,EAAE/H,aAQnB,OAJI+H,EAAElD,aACJlO,EAAI5E,KAAK8S,WAAakD,EAAElD,YAGlBkD,EAAEtR,QACV,KAAK0N,EAAAA,GAAYwB,cACfhP,EAAI5E,KAAKsS,iBAAmB0D,EAAE1D,iBAC9B,MACF,KAAKF,EAAAA,GAAYmB,IACf3O,EAAI5E,KAAKsS,iBAAmB0D,EAAE1D,iBAC9B,MACF,KAAKF,EAAAA,GAAYvK,MAAO,CACtB,MAAM0K,EAAQhV,KAAKqK,OAAO9H,MAAOuR,GAAM2E,EAAEzD,QAAUlB,EAAE9R,KAEjDgT,GACF3N,EAAI5E,KAAKsS,iBAAmBC,EAAMD,iBAClC1N,EAAIvE,SAASgE,YAAc,CAAE,CAAC9D,EAAAA,EAAgB+E,UAAWiN,EAAMhT,KAE/DqF,EAAIvE,SAASgE,YAAc,CAAE,CAAC9D,EAAAA,EAAgB+E,UAAW,IAG3D,KACF,EAGA,OAAOV,CACT,EAEAqV,eAAAA,CAAgBC,GACd,OAAOA,EAAI9a,KAAMG,GAAOhC,KAAK+B,YAAYC,KAAK+M,QAASvM,QAAYG,IAANH,GAC/D,EAEA2Y,cAAAA,CAAe1C,GACb,MAAMyC,EAAa,CAAC,EACd5b,EAAOmZ,EAAEnZ,KAWf,OATA4b,EAAW5b,GAAQ,CAAC,EAEhBmZ,EAAEmE,aACJ1B,EAAW0B,WAAanE,EAAEmE,YAG5B1B,EAAWrD,MAAQY,EAAEZ,MACrBqD,EAAWra,KAAO4X,EAAE5X,KAEbqa,CACT,EAEAD,YAAAA,CAAaxC,GACX,MAAMpR,EAAM,CAAExG,KAAM4X,EAAE5X,MAQtB,OANI4X,EAAEf,MACJrQ,EAAIsQ,IAAM,CAAC,EAEXtQ,EAAIyQ,OAAS,CAAEzI,YAAaoJ,EAAEpJ,aAGzBhI,CACT,EAEAwV,cAAAA,CAAepe,GACbuB,KAAKoB,WAAa3C,CACpB,EAEAqe,iBAAAA,CAAkBre,GAChBuB,KAAKyN,cAAgBhP,CACvB,EAEAqd,sBAAAA,CAAuBiB,GACrB,IACE,MAAMC,EAAoB1b,EAAAA,GAAAA,cAAmByb,GAC1CE,IAAI,wBACHC,UAAY,GAEVC,EAAUnd,KAAK0c,gBAAgB1c,KAAKiN,QAE1C,OAAO+P,EAAkBpU,OAAS,IAAI,IAAI8S,IAAI,IAAIyB,KAAYH,KAAuBG,CACvF,CAAE,MAAOrZ,GACP,MAAO,EACT,CACF,EAMAsZ,iBAAAA,CAAkBC,EAAKC,GACrB,IACE,MAAMxb,EAAOub,EAAIrB,MAAM,KAAKza,MAAM,GAC5BnD,EAAM0D,GAAM1D,IACZ+C,IAA0B/C,GAAKwD,eAAeD,SAAS,gBACvD4b,EAAcnf,EAAI+I,SAAWmW,EAAMA,EAAM1U,OAAS,GAEpDxK,GAAO+C,GAAyBoc,GAGlCF,EAAIpB,SAASqB,EAEjB,CAAE,MAAOxZ,GAAI,CACf,EAEAoY,QAAAA,CAASpK,GACP,MAAM,OAAE3O,EAAM,YAAE9B,GAAgByQ,EAC1B1O,EAAYpD,KAAKkD,YAAYC,GAC7Bqa,EAAenc,EAAYiX,WAC3BmF,EAAenc,EAAAA,GAAAA,MAAWkc,GAChC,IAAIhd,EAAWid,GAAcjd,UAAY,GACrCC,EAASgd,GAAchd,QAAU,GAYrC,GAVAY,EAAY0a,MAAM,CAAC,mBAAmB,GAElC9X,MAAMC,QAAQ1D,GACXA,EAASmB,SAAS,qBACrBnB,EAAS0I,KAAK,oBAGhB1I,EAAWF,EAAAA,GAASE,SAGlByD,MAAMC,QAAQzD,GAAS,CACzB,IAAIid,GAAa,EACjB,MAAMC,EAAgBld,EAAO8B,MAAOyB,GAAMC,MAAMC,QAAQF,IAAMA,EAAEG,KAAK,OAASf,EAAU3C,OAAO,GAAG0D,KAAK,OAEjGyZ,EAAmBnd,EAAO8B,MAAM,CAACyB,EAAGkR,OACpCjR,MAAMC,QAAQF,IAAMA,EAAEG,KAAK,OAASnE,KAAKyD,iBAAiBN,GAAQgB,KAAK,QACzEuZ,EAAYxI,GAEL,KAMP0I,EACFnd,EAAOid,GAAata,EAAU3C,OAAO,GAC3Bkd,GACVld,EAAOyI,KAAK9F,EAAU3C,OAAO,GAEjC,MACEA,EAAS2C,EAAU3C,OAiBrB,OAdID,EAASoI,OAAS,EACpBvH,EAAY0a,MAAM,CAAC,YAAavb,IAEhCa,EAAY0a,MAAM,CAAC,YAAa,IAChC/b,KAAKod,kBAAkB/b,EAAa,CAAC,aACrCrB,KAAKod,kBAAkB/b,EAAa,CAAC,oBAGnCZ,EAAOmI,OAAS,EAClBvH,EAAY0a,MAAM,CAAC,UAAWtb,GAE9BT,KAAKod,kBAAkB/b,EAAa,CAAC,WAGhCA,CACT,EAEA8a,SAAAA,CAAUrK,GACR,MAAM,OAAE3O,EAAM,YAAE9B,EAAW,cAAEwc,GAAgB,GAAU/L,EAEjDgM,EAAwB9d,KAAKkC,OAAOC,QAAQ,kBAAkB4b,EAAAA,GAAY/d,KAAKsO,qBAAqBzO,MAAMme,WAAa,GAEvHR,EAAenc,EAAYiX,WAC3BmF,EAAenc,EAAAA,GAAAA,MAAWkc,GAC1Bhd,EAAWid,GAAcjd,UAAY,GACrCC,EAASgd,GAAchd,QAAU,GAEvC,GAAIwD,MAAMC,QAAQ1D,IAAaqd,EAAe,CAC5C,MAAMI,EAAwBje,KAAKmI,cAAc2V,GAEjD,IAAK,IAAII,EAAI,EAAGA,EAAI1d,EAASoI,OAAQsV,IACf,qBAAhB1d,EAAS0d,KACLja,MAAMC,QAAQ+Z,GAAuBzd,WAAayd,EAAsBzd,SAASmB,SAAS,qBAC9FnB,EAAS2d,OAAOD,EAAG,GAI3B,CAEA,GAAIja,MAAMC,QAAQzD,GAAS,CACzB,MAAM2C,EAAYpD,KAAKkD,YAAYC,GAEnC,IAAK,IAAI+a,EAAI,EAAGA,EAAIzd,EAAOmI,OAAQsV,IAC7Bja,MAAMC,QAAQzD,EAAOyd,KAAOzd,EAAOyd,GAAG/Z,KAAK,OAASf,EAAU3C,OAAO,GAAG0D,KAAK,MAC/E1D,EAAO0d,OAAOD,EAAG,EAGvB,CAgBA,OAdI1d,EAASoI,OAAS,EACpBvH,EAAY0a,MAAM,CAAC,YAAavb,IAEhCa,EAAY0a,MAAM,CAAC,YAAa,IAChC/b,KAAKod,kBAAkB/b,EAAa,CAAC,aACrCrB,KAAKod,kBAAkB/b,EAAa,CAAC,oBAGnCZ,EAAOmI,OAAS,EAClBvH,EAAY0a,MAAM,CAAC,UAAWtb,GAE9BT,KAAKod,kBAAkB/b,EAAa,CAAC,WAGhCA,CACT,EAEA8X,kBAAAA,CAAmBtY,GACjB,OAAOA,EAAO,GAAIA,MAAU+T,EAAAA,EAAAA,IAAU,GAAGgE,qBAAmBjW,CAC9D,EAEAyb,wBAAAA,CAAyBC,GACvB,MAAMxd,EAAOwd,EAASvb,SAASjC,KACzByd,EAAOD,EAASC,KAChBC,EAAave,KAAKyJ,eAAiBpH,EAAAA,GAAI6I,GAAK,iBAAmB,0BAC/DsT,EAAMH,GAAUvb,UAAU0b,IAEhC,MAAO,CAAC,CACN3d,OACAyd,OACAE,MACAD,cAEJ,EAEA,gBAAME,CAAW5b,GACf,IAAKA,GAAIJ,OAASzC,KAAKuG,YAAcvG,KAAK+Q,UACxC,OAAO,EAGT,IAAItL,EAASzF,KAAK0F,UAAU7C,EAAGJ,OAE1BgD,GAAUzF,KAAK0e,QAAU1e,KAAKwG,YAEjCf,EAASzF,KAAKwG,WAGXf,IAAUzF,KAAKgR,gBAClBvL,QAAezF,KAAKkC,OAAO2H,SAAS,mBAAoB,CACtD/G,SAAU,CACRjC,KAAiBb,KAAKuG,WACtByI,UAAiBhP,KAAKvB,MAAMqE,SAASkM,UACrCjM,OAAiB,CAAE,CAACC,EAAAA,EAAgB2b,YAAa,aACjDC,gBAAiB5e,KAAKoe,yBAAyBvb,IAEjDvD,KAAMgH,EAAAA,MAIV,IACMb,IAEGzF,KAAKmG,yBAA4BnG,KAAKoG,6BACzCX,EAAOoZ,QAAQ,WAAY7e,KAAK2F,UAAY,IAC5CF,EAAOoZ,QAAQ,cAAe7e,KAAKyN,eAAiB,UAC9ChI,EAAOqZ,QAGnB,CAAE,MAAOhb,GACP,OAAOib,QAAQC,OAAOlb,EACxB,CACF,EAEA,2BAAMmb,CAAsBpc,GAC1B,IAAKA,GAAIJ,KACP,OAAO,EAIT,MAAMyc,EAAS,GAEf,IAAK,MAAMhgB,KAAOc,KAAK6G,kBAAmB,CACxC,IAAIL,EAAYtH,EAAIsH,UAkBpB,GAhBKA,IAAaxG,KAAKgR,gBACrBxK,QAAkBxG,KAAKkC,OAAO2H,SAAS,mBAAoB,CACzD/G,SAAU,CACRjC,KAAiB3B,EAAIqH,WACrByI,UAAiBnM,EAAGC,SAASkM,UAC7BjM,OAAiB,CAAE,CAACC,EAAAA,EAAgB2b,YAAa,aACjDC,gBAAiB5e,KAAKoe,yBAAyBvb,IAEjDvD,KAAMgH,EAAAA,MAINpH,EAAIiI,SAAWkU,EAAAA,GAAmBC,WACpC9U,EAAUqY,QAAQ3f,EAAIoI,SAAUpI,EAAIqI,aAGlCrI,EAAIiI,SAAWkU,EAAAA,GAAmBE,WACpC,IAAK,MAAM4D,KAAYjgB,EAAIuI,QAAS,CAClC,MAAM2X,GAAWpf,KAAKkC,OAAOC,QAAQ,iBAAiBE,EAAAA,GAAIC,MAAQ,IAAIC,MAAMmE,GAAMA,EAAE1E,KAAOmd,IAE3F3Y,EAAUqY,QAAQ,GAAIO,EAAQtc,SAASkM,aAAeoQ,EAAQtc,SAASjC,OAASue,EAAQ3c,KAAKC,UAC/F,CAGFwc,EAAOhW,KAAK1C,EACd,CAEA,IACE,IAAK,MAAM6X,KAAYa,QACfb,EAASS,MAEnB,CAAE,MAAOhb,GACP,OAAOib,QAAQC,OAAOlb,EACxB,CACF,EAEAub,8BAAAA,GACE,MAAMC,EAAS,GAEf,IAAK,IAAIpB,EAAI,EAAGA,EAAIle,KAAK6G,kBAAkB+B,OAAQsV,IAAK,CACtD,MAAMhf,EAAMc,KAAK6G,kBAAkBqX,GAC7B/W,EAASjI,EAAIiI,OAEnB,GAAIA,IAAWkU,EAAAA,GAAmBC,UAAW,CAC3C,IAAKpc,EAAIoI,SAAU,CACjB,MAAMiY,EAAYvf,KAAKmQ,EAAE,2CACnBqP,EAAUxf,KAAKmQ,EAAE,sBAAuB,CAAE/R,IAAKmhB,IAErDD,EAAOpW,KAAKsW,EACd,CAEA,IAAKtgB,EAAIqI,YAAa,CACpB,MAAMgY,EAAYvf,KAAKmQ,EAAE,2CACnBqP,EAAUxf,KAAKmQ,EAAE,sBAAuB,CAAE/R,IAAKmhB,IAErDD,EAAOpW,KAAKsW,EACd,CAEA,GAAItgB,EAAIqI,aAAerI,EAAIqI,YAAYqB,OAAS,EAAG,CACjD,MAAM2W,EAAYvf,KAAKmQ,EAAE,2CACnBqP,EAAUxf,KAAKmQ,EAAE,wBAAyB,CAAE/R,IAAKmhB,EAAWE,IAAK,MAEvEH,EAAOpW,KAAKsW,EACd,CACF,KAAO,CACL,IAAKtgB,EAAIsI,OAA8B,IAArBtI,EAAIsI,MAAMoB,OAAc,CACxC,MAAM2W,EAAYvf,KAAKmQ,EAAE,2CACnBqP,EAAUxf,KAAKmQ,EAAE,sBAAuB,CAAE/R,IAAKmhB,IAErDD,EAAOpW,KAAKsW,EACd,CAEA,IAAKtgB,EAAIuI,SAAkC,IAAvBvI,EAAIuI,QAAQmB,OAAc,CAC5C,MAAM2W,EAAYvf,KAAKmQ,EAAE,8CACnBqP,EAAUxf,KAAKmQ,EAAE,sBAAuB,CAAE/R,IAAKmhB,IAErDD,EAAOpW,KAAKsW,EACd,CACF,CAEA,GAAIF,EAAO1W,OAAS,EAClB,KAEJ,CAEA,OAAO0W,CACT,EAEA1M,oBAAAA,CAAqBnQ,GACnB,MAAM4E,EAAM,GAUZ,OARI5E,EAAK6B,SAAS7B,KAAKwD,SACrBxD,EAAK6B,SAAS7B,KAAKwD,QAAQ1C,SAAS2C,IAC9BA,GAAG0P,uBAAuBC,WAC5BxO,EAAI6B,KAAKhD,EAAE0P,sBAAsBC,UACnC,IAIGxO,CACT,EAEAqY,gBAAAA,CAAiBD,GACf,MAAME,EAAW3f,KAAKoE,mBAAmBpE,KAAKyC,MACxC4B,EAASrE,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOC,SAASH,QAAU,GAEjE,GAAIob,IAAQE,EACNtb,EAAOuE,OAAS,EAClBvE,EAAO6E,KAAKvI,EAAAA,GAAW,IAEvBlB,OAAOmgB,OAAO5f,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAS,CACpDH,OAAQ,CACN1D,EAAAA,GAAW,WAIZ,IAAK8e,EAAK,CACf,MAAMvK,EAAQ7Q,EAAOqZ,WAAWlb,GAAMiC,IAAQjC,EAAG7B,EAAAA,GAAW,MAExDgf,GAA8B,IAAlBtb,EAAOuE,cACd5I,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQ,UACrCmb,IACTtb,EAAO8Z,OAAOjJ,EAAO,GACrBlV,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQ,UAAYH,EAEvD,CACF,EAEAwb,aAAAA,CAAcC,EAAO,CACnBjb,KAAK,EAAOO,YAAY,EAAOiJ,2BAA2B,IAE1D,IAAIyR,EAAKjb,IAMP,cAHO7E,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAO,wBAC/BvE,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOwb,SAAS,OAKjD,IAREC,EAAAA,EAAAA,IAAIhgB,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAQ,qCAAsCub,EAAK1a,YAQ7E0a,EAAK1a,YACP4a,EAAAA,EAAAA,IAAIhgB,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAQ,wBAAwB,QAE5D,WACSvE,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOwb,SAASE,IAAI,WACnD,MAAMC,EAA6E,IAApEzgB,OAAOiI,KAAK1H,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOwb,SAASE,KAAKrX,OAEpEsX,UACKlgB,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOwb,SAAS,MAEnD,CAAE,MAAOjc,GAAI,CAGXgc,EAAKzR,2BACP2R,EAAAA,EAAAA,IAAIhgB,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAQ,sCAAsC,UAEnEvE,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOI,SAASC,WAAWC,IAAI,aAElE,EAEAsb,aAAAA,CAAc1hB,GACRA,GACFuhB,EAAAA,EAAAA,IAAIhgB,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOe,IAAK,yBAAyB,UAE1DtF,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOe,IAAI,wBAE9C,EAEA8a,MAAAA,EAAO,WAAEjS,GAAa,EAAK,0BAAEC,GAA4B,GAAU,CAAC,GAC9DD,GACF6R,EAAAA,EAAAA,IAAIhgB,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAS,MAAO4J,EAA4B,CAAEnJ,YAAY,GAAS,CAAC,UAEhGjF,KAAKyC,KAAK6B,SAAS7B,KAAK8B,OAAOC,QAAQ,MAElD,EAEA6b,qBAAAA,CAAsBtX,EAAM,IAC1B,MAAMiU,EAAoBhd,KAAKqI,mBAAmBrI,KAAKoB,YAEvD2H,EAAIlH,KAAKG,IACP,MAAMkT,EAAQ8H,EAAkBU,WAAWjf,GAAUA,IAAUuB,KAAK+B,YAAYC,KAE5EkT,GAAS,GACX8H,EAAkBmB,OAAOjJ,EAAO,EAClC,IAGF,MAAMoL,EAAetgB,KAAKmI,cAAcnI,KAAKoB,YAE7Ckf,EAAahY,oBAAsB0U,EAEF,IAA7BA,EAAkBpU,eACb0X,EAAahY,oBAGlBiY,IAAQD,GACVtgB,KAAK,mBAAgB2C,EAErB3C,KAAK,cAAgB6D,IAAAA,KAAYyc,GAGnCtgB,KAAKsT,mBACP,EAEAA,iBAAAA,GACEtT,KAAKwgB,WAAU,KACbxgB,KAAKygB,MAAMC,YAAYC,aAAa,GAExC,EAEAC,cAAAA,GACE5gB,KAAK8N,cAAgB9N,KAAK8N,YAC5B,EAEA+S,WAAAA,CAAYpiB,GACLA,IACHuB,KAAK6d,eAAgB,EAEzB,EAEAiD,oBAAAA,CAAqBxhB,EAAM0C,GACzB,GAAa,SAAT1C,EAAiB,CACnB,MAAMyhB,EAAkB/gB,KAAKsN,aAE7BtN,KAAKsO,mBAAqBtM,EAC1BhC,KAAKwgB,WAAU,KACTO,IACF/gB,KAAKsN,aAAeyT,EACtB,GAEJ,CACF,EAEAC,cAAAA,CAAeviB,EAAQ,CAAC,GACtB,MAAM,OAAEuP,GAAWvP,EAEnBuB,KAAK,kBAAoBgO,CAC3B,EAEAiT,mCAAAA,CAAoCxiB,GAClCuB,KAAK,iCAAmCvB,CAC1C,GAGFqB,MAAO,CACL6N,SAAU,CACR5N,OAAAA,CAAQyc,EAAK0E,GACX,GAAIjd,MAAMC,QAAQsY,GAAM,CACtB,MAAM9O,EAAU8O,EAAI,IAAIxH,MAClBA,EAAQhV,KAAKqK,OAAO9H,MAAOuR,GAAMpG,IAAYoG,EAAE9R,KAC/CmB,EAAS6R,GAAOmM,YAEhBC,EAAaF,EAAI,IAAIlM,MAEvBhV,KAAKiR,UAAYmQ,IAAe1T,GAAWA,IAC7C1N,KAAKmD,OAASA,EAElB,CACF,GAGFqD,UAAW,CACTzG,OAAAA,CAAQ0F,GACFA,GAAUzF,KAAKyJ,eAAiBpH,EAAAA,GAAI4P,SACtCjS,KAAKuG,WAAad,GAAQ3C,SAASjC,KAEvC,EACAV,WAAW,EACXkhB,MAAW,GAGbtQ,SAAAA,CAAU0O,GACJA,IACFzf,KAAK,UAAY,GACjBA,KAAK,mBAAgB2C,EACrB3C,KAAK,iBAAkB,EAE3B,EAEAwN,gBAAAA,CAAiBiS,GACfzf,KAAK0f,iBAAiBD,EACxB,EAEAvR,UAAAA,CAAWuR,GACTzf,KAAK6f,cAAc,CACjBhb,IAAK4a,EAAKra,WAAYpF,KAAKoF,WAAYiJ,0BAA2BrO,KAAKqO,2BAE3E,EAEAjJ,UAAAA,CAAWqa,GACTzf,KAAK6f,cAAc,CACjBhb,IAAK7E,KAAKkO,WAAY9I,WAAYqa,EAAKpR,0BAA2BrO,KAAKqO,2BAE3E,EAEAA,yBAAAA,CAA0BoR,GACxBzf,KAAK6f,cAAc,CACjBhb,IAAK7E,KAAKkO,WAAY9I,WAAYpF,KAAKoF,WAAYiJ,0BAA2BoR,GAElF,EAEA9Q,UAAAA,CAAWlQ,GACTuB,KAAKmgB,cAAc1hB,EACrB,EAEA0P,UAAAA,CAAWsR,GACTzf,KAAKogB,OAAO,CAAEjS,WAAYsR,EAAKrR,0BAA2BpO,KAAKoO,2BACjE,EAEAA,yBAAAA,CAA0BqR,GACxBzf,KAAKogB,OAAO,CAAEjS,WAAYnO,KAAKmO,WAAYC,0BAA2BqR,GACxE,EAEAnS,aAAc,CAOZvN,OAAAA,CAAQyc,GACN,GAAIxc,KAAK+N,YAAa,CACpB,IAAI1G,EAAMrH,KAAKgY,YAAY,CACzB1K,aAAckP,EAAKrZ,OAAQnD,KAAKmD,OAAQ0a,cAAe7d,KAAK6d,gBAG9D,GAAIrB,EAAK,CACP,MAAM8E,EAAkBthB,KAAKmB,sBAAsBkG,GAE9Cia,IACHja,EAAM,kBAAmBA,IAE7B,CAEArH,KAAK,cAAgBqH,EACrBrH,KAAKsT,mBACP,CACAtT,KAAK+N,aAAc,EACnB/N,KAAK6d,eAAgB,CACvB,GAGF1a,MAAAA,CAAOqZ,GACL,MAAMnV,EAAMrH,KAAKgY,YAAY,CAAE1K,aAActN,KAAKsN,aAAcnK,OAAQqZ,IAExExc,KAAK,cAAgBqH,EACrBrH,KAAKsT,mBACP,EAEAlS,UAAAA,CAAWob,EAAK0E,GACd,MAAMxd,EAAkB1D,KAAK0D,gBAAgB8Y,EAAKxc,KAAKmD,OAAQnD,KAAKsN,cAEhE5J,IAAoB1D,KAAKsN,eAC3BtN,KAAK+N,aAAc,EACnB/N,KAAKsN,aAAe5J,EAExB,EAEAuJ,MAAAA,CAAOuP,EAAK0E,GAEVlhB,KAAKoB,WAAapB,KAAKgY,YAAY,CAAE1K,aAActN,KAAKsN,aAAcnK,OAAQnD,KAAKmD,SACnFnD,KAAKsT,oBAEL,MAAMiO,EAAQC,IAAWN,EAAK1E,GAE1B+E,EAAM3Y,OAAS,GAAK5I,KAAKiR,UAC3BjR,KAAKqgB,sBAAsBkB,EAE/B,G","sources":["webpack://harvester-1.5.0-rc5/../../../dashboard/shell/components/formatter/BadgeStateFormatter.vue","webpack://harvester-1.5.0-rc5/../../../dashboard/shell/components/formatter/BadgeStateFormatter.vue?2e48","webpack://harvester-1.5.0-rc5/./mixins/harvester-vm/impl.js","webpack://harvester-1.5.0-rc5/./mixins/harvester-vm/index.js"],"sourcesContent":["<script>\nimport { BadgeState } from '@components/BadgeState';\nimport { colorForState, stateDisplay } from '@shell/plugins/dashboard-store/resource-class';\nexport default {\n  components: { BadgeState },\n  props:      {\n    value: {\n      type:    String,\n      default: ''\n    },\n    row: {\n      type:     Object,\n      required: true\n    },\n    col: {\n      type:    Object,\n      default: () => {}\n    },\n\n    arbitrary: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      stateDisplay:    '',\n      stateBackground: ''\n    };\n  },\n\n  watch: {\n    value: {\n      handler() {\n        if (this.arbitrary) {\n          const color = colorForState(this.value);\n\n          this.stateDisplay = stateDisplay(this.value);\n          this.stateBackground = color.replace('text-', 'bg-');\n        }\n      },\n      immediate: true\n    }\n  }\n};\n</script>\n\n<template>\n  <div>\n    <div v-if=\"arbitrary\">\n      <BadgeState\n        v-if=\"value\"\n        :color=\"stateBackground\"\n        :label=\"stateDisplay\"\n      />\n    </div>\n    <BadgeState\n      v-else\n      :value=\"row\"\n    />\n  </div>\n</template>\n","import { render } from \"./BadgeStateFormatter.vue?vue&type=template&id=acca1fb8\"\nimport script from \"./BadgeStateFormatter.vue?vue&type=script&lang=js\"\nexport * from \"./BadgeStateFormatter.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../../harvester-ui-extension/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport { clone } from '@shell/utils/object';\nimport { SECRET } from '@shell/config/types';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport { OS } from './index';\n\nexport const QGA_JSON = {\n  package_update: true,\n  packages:       ['qemu-guest-agent'],\n  runcmd:         [\n    [\n      'systemctl',\n      'enable',\n      '--now',\n      'qemu-guest-agent.service'\n    ]\n  ]\n};\n\nexport const QGA_MAP = { default: 'qemu-guest-agent.service' };\n\nexport const USB_TABLET = [{\n  bus:  'usb',\n  name: 'tablet',\n  type: 'tablet'\n}];\n\nexport const SSH_EXISTING_TYPE = {\n  EXISTING_ALL:             'EXISTING_ALL',\n  EXISTING_ONLY_ANNOTATION: 'EXISTING_ANNOTATION',\n  EXISTING_ONLY_CLOUD:      'EXISTING_CLOUD',\n};\n\nexport default {\n  methods: {\n    hasCloudConfigComment(userScript) {\n      // Check that userData contains: #cloud-config\n      const userDataDoc = userScript ? YAML.parseDocument(userScript) : YAML.parseDocument({});\n      const items = userDataDoc?.contents?.items || [];\n\n      let exist = false;\n\n      if (userDataDoc?.comment === 'cloud-config' || userDataDoc?.comment?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      if (userDataDoc?.commentBefore === 'cloud-config' || userDataDoc?.commentBefore?.includes('cloud-config\\n')) {\n        exist = true;\n      }\n\n      items.map((item) => {\n        const key = item.key;\n\n        if (key?.commentBefore === 'cloud-config' || key?.commentBefore?.includes('cloud-config\\n')) {\n          exist = true;\n        }\n      });\n\n      return exist;\n    },\n\n    getSSHValue(id) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const sshs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      return sshs.find( (O) => O.id === id)?.spec?.publicKey || undefined;\n    },\n\n    getOsType(vm) {\n      return vm.metadata?.labels?.[HCI_ANNOTATIONS.OS];\n    },\n\n    getMatchQGA(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n      let hasCustomQGA = false;\n\n      OS.forEach((O) => {\n        if (O.match) {\n          hasCustomQGA = O.match.find((type) => type === osType);\n        }\n      });\n\n      if (hasCustomQGA) {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP[osType];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      }\n\n      return _QGA_JSON;\n    },\n\n    getSimilarRuncmd(osType) {\n      const _QGA_JSON = clone(QGA_JSON);\n\n      if (osType === 'openSUSE') {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['default'];\n      } else {\n        _QGA_JSON.runcmd[0][3] = QGA_MAP['suse'];\n      }\n\n      return _QGA_JSON.runcmd[0];\n    },\n\n    hasInstallAgent(userScript, osType, oldValue) {\n      let dataFormat = {};\n      const _QGA_JSON = this.getMatchQGA(osType);\n\n      try {\n        dataFormat = jsyaml.load(userScript) || {};\n      } catch (e) {\n        new Error('Function(hasInstallAgent) error');\n\n        return oldValue;\n      }\n\n      return dataFormat?.packages?.includes('qemu-guest-agent') && !!dataFormat?.runcmd?.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n    },\n\n    isInstallUSBTablet(spec) {\n      const inputs = spec?.template?.spec?.domain?.devices?.inputs;\n\n      if (Array.isArray(inputs)) {\n        return !!inputs.find((O) => {\n          return isEqual(O, USB_TABLET[0]);\n        });\n      } else {\n        return false;\n      }\n    },\n\n    isEfiEnabled(spec) {\n      return !!(spec?.template?.spec?.domain?.firmware?.bootloader?.efi);\n    },\n\n    isTpmEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm;\n    },\n\n    isTPMPersistentStateEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.devices?.tpm?.persistent;\n    },\n\n    isEFIPersistentStateEnabled(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.persistent;\n    },\n\n    isSecureBoot(spec) {\n      return !!spec?.template?.spec?.domain?.firmware?.bootloader?.efi?.secureBoot;\n    },\n\n    isCpuPinning(spec) {\n      return !!spec?.template?.spec?.domain?.cpu?.dedicatedCpuPlacement;\n    },\n\n    getCloudInitNoCloud(spec) {\n      const secret = this.getSecret(spec);\n      let userData = secret?.decodedData?.userdata;\n      let networkData = secret?.decodedData?.networkdata;\n\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n\n      // If the value is not found inside the secret, the data may be written directly in the yaml\n      if (cloudInitNoCloud?.userData) {\n        userData = cloudInitNoCloud.userData;\n        this.saveUserDataAsClearText = true;\n      }\n\n      if (cloudInitNoCloud?.networkData) {\n        networkData = cloudInitNoCloud.networkData;\n        this.saveNetworkDataAsClearText = true;\n      }\n\n      return { userData, networkData };\n    },\n\n    getSecret(spec) {\n      const cloudInitNoCloud = spec?.template?.spec?.volumes?.find( (V) => {\n        return V.name === 'cloudinitdisk';\n      })?.cloudInitNoCloud || {};\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n\n      const secretName = cloudInitNoCloud?.secretRef?.name || cloudInitNoCloud?.networkDataSecretRef?.name;\n\n      const secret = secrets.find((s) => s.metadata.name === secretName);\n\n      return secret;\n    },\n\n    getAccessCredentials(spec) {\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const secrets = this.$store.getters[`${ inStore }/all`](SECRET) || [];\n      const credentials = spec?.template?.spec?.accessCredentials || [];\n      const annotations = JSON.parse(spec.template.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] || '[]');\n\n      return credentials.map((c) => {\n        const source = !!c.userPassword ? 'userPassword' : 'sshPublicKey';\n        const secretName = c[source]?.source?.secret?.secretName;\n        const secretRef = secrets.find((s) => s.metadata.name === secretName);\n        const out = {\n          source, username: '', newPassword: '', users: [], sshkeys: [], secretName, secretRef\n        };\n\n        if (!secretRef) {\n          out.secretRef = undefined;\n        } else if (source === 'userPassword') {\n          const username = Object.keys(secretRef?.data)[0];\n          const newPassword = secretRef.decodedData[username];\n\n          out.username = username;\n          out.newPassword = newPassword;\n        } else {\n          const users = c[source].propagationMethod.qemuGuestAgent.users;\n          const sshkeys = annotations?.[secretName];\n\n          out.users = users;\n          out.sshkeys = sshkeys;\n        }\n\n        return out;\n      });\n    },\n\n    getRootImageId(vm) {\n      const volumes = parseVolumeClaimTemplates(vm);\n\n      return volumes?.[0]?.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] || '';\n    },\n\n    getSSHFromAnnotation(spec) {\n      const ids = spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.SSH_NAMES] || '[]';\n\n      return JSON.parse(ids);\n    },\n\n    convertToJson(script = '') {\n      let out = {};\n\n      try {\n        out = jsyaml.load(script);\n      } catch (e) {\n        new Error('Function(convertToJson) error');\n      }\n\n      return out;\n    },\n\n    getSSHFromUserData(userData) {\n      return this.convertToJson(userData)?.ssh_authorized_keys || [];\n    },\n\n    compareSSHValue(a = '', b = '') {\n      const r = /(\\r\\n\\t|\\n|\\r\\t)|(\\s*)/gm;\n\n      return a.replace(r, '') === b.replace(r, '');\n    },\n\n    mergeAllSSHs(spec) {\n      const keys = this.getSSHFromAnnotation(spec);\n      const { userScript: userData } = this.getCloudInitNoCloud(spec);\n\n      if (!keys?.length < 0 && !userData) {\n        return [];\n      }\n\n      let out = [];\n\n      const inStore = this.$store.getters['currentProduct'].inStore;\n      const allSSHs = this.$store.getters[`${ inStore }/all`](HCI.SSH) || [];\n\n      out = (keys || []).map((id) => {\n        const hasSSHResource = allSSHs.find((ssh) => ssh.id === id);\n\n        if (hasSSHResource) {\n          return {\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          };\n        } else {\n          return {\n            id,\n            data: id,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_ANNOTATION\n          };\n        }\n      });\n\n      const _userDataSSH = this.getSSHFromUserData(userData);\n\n      _userDataSSH.map( (sshValue) => {\n        const hasSSHResource = allSSHs.find((ssh) => this.compareSSHValue(sshValue, ssh.spec?.publicKey));\n\n        if (hasSSHResource && !out.find((O) => O.id === hasSSHResource.id)) {\n          out.push({\n            id:   hasSSHResource.id,\n            data: hasSSHResource,\n            type: SSH_EXISTING_TYPE.EXISTING_ALL\n          });\n        } else if (!hasSSHResource) {\n          out.push({\n            id:   'Unknown',\n            data: sshValue,\n            type: SSH_EXISTING_TYPE.EXISTING_ONLY_CLOUD\n          });\n        }\n      });\n\n      return out;\n    },\n  },\n};\n","import YAML from 'yaml';\nimport jsyaml from 'js-yaml';\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\nimport difference from 'lodash/difference';\n\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\n\nimport { allHash } from '@shell/utils/promise';\nimport { randomStr } from '@shell/utils/string';\nimport { base64Decode } from '@shell/utils/crypto';\nimport { formatSi, parseSi } from '@shell/utils/units';\nimport { _CLONE, _CREATE, _VIEW } from '@shell/config/query-params';\nimport {\n  PV, PVC, STORAGE_CLASS, NODE, SECRET, CONFIG_MAP, NETWORK_ATTACHMENT, NAMESPACE, LONGHORN\n} from '@shell/config/types';\nimport { HOSTNAME } from '@shell/config/labels-annotations';\nimport { HCI as HCI_ANNOTATIONS } from '@pkg/harvester/config/labels-annotations';\nimport { uniq } from '@shell/utils/array';\nimport {\n  ADD_ONS, SOURCE_TYPE, ACCESS_CREDENTIALS, maintenanceStrategies, runStrategies\n} from '../../config/harvester-map';\nimport { HCI_SETTING } from '../../config/settings';\nimport { HCI } from '../../types';\nimport { parseVolumeClaimTemplates } from '../../utils/vm';\nimport impl, { QGA_JSON, USB_TABLET } from './impl';\nimport { GIBIBYTE } from '../../utils/unit';\nimport { VOLUME_MODE } from '@pkg/harvester/config/types';\n\nconst LONGHORN_V2_DATA_ENGINE = 'longhorn-system/v2-data-engine';\n\nexport const MANAGEMENT_NETWORK = 'management Network';\n\nexport const OS = [{\n  label: 'Windows',\n  value: 'windows'\n}, {\n  label: 'Linux',\n  value: 'linux'\n}, {\n  label: 'SUSE Linux Enterprise',\n  value: 'SLEs'\n}, {\n  label: 'Debian',\n  value: 'debian'\n}, {\n  label: 'Fedora',\n  value: 'fedora'\n}, {\n  label: 'Gentoo',\n  value: 'gentoo'\n}, {\n  label: 'Oracle',\n  value: 'oracle'\n}, {\n  label: 'Red Hat',\n  match: ['redhat', 'rhel'],\n  value: 'redhat'\n}, {\n  label: 'openSUSE',\n  value: 'openSUSE',\n}, {\n  label: 'Ubuntu',\n  value: 'ubuntu'\n}, {\n  label: 'Other Linux',\n  match: ['centos'],\n  value: 'otherLinux'\n}];\n\nexport const CD_ROM = 'cd-rom';\nexport const HARD_DISK = 'disk';\n\nexport default {\n  mixins: [impl],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    resourceType: {\n      type:    String,\n      default: ''\n    }\n  },\n\n  async fetch() {\n    const inStore = this.$store.getters['currentProduct'].inStore;\n    const hash = {\n      pvs:               this.$store.dispatch(`${ inStore }/findAll`, { type: PV }),\n      pvcs:              this.$store.dispatch(`${ inStore }/findAll`, { type: PVC }),\n      storageClasses:    this.$store.dispatch(`${ inStore }/findAll`, { type: STORAGE_CLASS }),\n      sshs:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SSH }),\n      settings:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.SETTING }),\n      images:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.IMAGE }),\n      versions:          this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_VERSION }),\n      templates:         this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM_TEMPLATE }),\n      networkAttachment: this.$store.dispatch(`${ inStore }/findAll`, { type: NETWORK_ATTACHMENT }),\n      vmis:              this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMI }),\n      vmims:             this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VMIM }),\n      vms:               this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VM }),\n      secrets:           this.$store.dispatch(`${ inStore }/findAll`, { type: SECRET }),\n      addons:            this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.ADD_ONS }),\n      longhornV2Engine:  this.$store.dispatch(`${ inStore }/find`, { type: LONGHORN.SETTINGS, id: LONGHORN_V2_DATA_ENGINE }),\n    };\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](NODE)) {\n      hash.nodes = this.$store.dispatch(`${ inStore }/findAll`, { type: NODE });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.CLUSTER_NETWORK)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.CLUSTER_NETWORK });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](HCI.VLAN_CONFIG)) {\n      hash.clusterNetworks = this.$store.dispatch(`${ inStore }/findAll`, { type: HCI.VLAN_CONFIG });\n    }\n\n    if (this.$store.getters[`${ inStore }/schemaFor`](LONGHORN.VOLUMES)) {\n      hash.longhornVolumes = this.$store.dispatch(`${ inStore }/findAll`, { type: LONGHORN.VOLUMES });\n    }\n\n    const res = await allHash(hash);\n\n    const hasPCISchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.PCI_DEVICE);\n    const hasSRIOVGPUSchema = !!this.$store.getters[`${ inStore }/schemaFor`](HCI.SR_IOVGPU_DEVICE);\n\n    const enabledAddons = res.addons.reduce((acc, addon) => ({ ...acc, [addon.name]: addon.spec?.enabled }), {});\n\n    this.enabledPCI = hasPCISchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER];\n    this.enabledSriovgpu = hasSRIOVGPUSchema && enabledAddons[ADD_ONS.PCI_DEVICE_CONTROLLER] && enabledAddons[ADD_ONS.NVIDIA_DRIVER_TOOLKIT_CONTROLLER];\n  },\n\n  data() {\n    const isClone = this.realMode === _CLONE;\n\n    return {\n      OS,\n      isClone,\n      spec:                          null,\n      osType:                        'linux',\n      sshKey:                        [],\n      maintenanceStrategies,\n      maintenanceStrategy:           'Migrate',\n      runStrategies,\n      runStrategy:                   'RerunOnFailure',\n      installAgent:                  true,\n      hasCreateVolumes:              [],\n      installUSBTablet:              true,\n      networkScript:                 '',\n      userScript:                    '',\n      imageId:                       '',\n      diskRows:                      [],\n      networkRows:                   [],\n      machineType:                   '',\n      secretName:                    '',\n      secretRef:                     null,\n      showAdvanced:                  false,\n      deleteAgent:                   true,\n      memory:                        null,\n      cpu:                           '',\n      reservedMemory:                null,\n      accessCredentials:             [],\n      efiEnabled:                    false,\n      tpmEnabled:                    false,\n      tpmPersistentStateEnabled:     false,\n      efiPersistentStateEnabled:     false,\n      secureBoot:                    false,\n      userDataTemplateId:            '',\n      saveUserDataAsClearText:       false,\n      saveNetworkDataAsClearText:    false,\n      enabledPCI:                    false,\n      enabledSriovgpu:               false,\n      immutableMode:                 this.realMode === _CREATE ? _CREATE : _VIEW,\n      terminationGracePeriodSeconds: '',\n      cpuPinning:                    false,\n    };\n  },\n\n  computed: {\n    inStore() {\n      return this.$store.getters['currentProduct'].inStore;\n    },\n\n    images() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.IMAGE);\n    },\n\n    versions() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_VERSION);\n    },\n\n    templates() {\n      return this.$store.getters[`${ this.inStore }/all`](HCI.VM_TEMPLATE);\n    },\n\n    pvcs() {\n      return this.$store.getters[`${ this.inStore }/all`](PVC);\n    },\n\n    secrets() {\n      return this.$store.getters[`${ this.inStore }/all`](SECRET);\n    },\n\n    filteredNamespaces() {\n      return this.$store.getters['harvester/all'](NAMESPACE).filter((namespace) => !namespace.isSystem);\n    },\n\n    nodes() {\n      return this.$store.getters['harvester/all'](NODE);\n    },\n\n    nodesIdOptions() {\n      const nodes = this.$store.getters[`${ this.inStore }/all`](NODE);\n\n      const networkNames = this.networkRows.map((n) => n.networkName);\n      const vmNetworks = this.$store.getters[`${ this.inStore }/all`](NETWORK_ATTACHMENT);\n      const selectedVMNetworks = networkNames.map((name) => vmNetworks.find((n) => n.id === name)).filter((n) => n?.id);\n      const clusterNetworks = uniq(selectedVMNetworks.map((n) => n.clusterNetworkResource?.id));\n\n      return nodes.filter((N) => !N.isUnSchedulable && N.isEtcd !== 'true').map((node) => {\n        const requireLabelKeys = [];\n        let isNetworkSchedule = true;\n\n        if (clusterNetworks.length > 0) {\n          clusterNetworks.map((clusterNetwork) => {\n            requireLabelKeys.push(`network.harvesterhci.io/${ clusterNetwork }`);\n          });\n        }\n\n        requireLabelKeys.map((requireLabelKey) => {\n          if (node.metadata?.labels?.[requireLabelKey] !== 'true') {\n            isNetworkSchedule = false;\n          }\n        });\n\n        return {\n          label:    isNetworkSchedule ? node.nameDisplay : `${ node.nameDisplay } (${ this.t('harvester.virtualMachine.scheduling.networkNotSupport') })`,\n          value:    node.id,\n          disabled: !isNetworkSchedule,\n        };\n      });\n    },\n\n    storageClassSetting() {\n      try {\n        const storageClassValue = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.DEFAULT_STORAGE_CLASS)?.value;\n\n        return JSON.parse(storageClassValue);\n      } catch (e) {\n        return {};\n      }\n    },\n\n    customVolumeMode() {\n      return this.storageClassSetting.volumeMode || VOLUME_MODE.BLOCK;\n    },\n\n    customAccessMode() {\n      return this.storageClassSetting.accessModes || 'ReadWriteMany';\n    },\n\n    isWindows() {\n      return this.osType === 'windows';\n    },\n\n    needNewSecret() {\n      // When creating a template it is always necessary to create a new secret.\n      return this.resourceType === HCI.VM_VERSION || this.isCreate;\n    },\n\n    defaultTerminationSetting() {\n      const setting = this.$store.getters[`${ this.inStore }/all`](HCI.SETTING).find( (O) => O.id === HCI_SETTING.VM_TERMINATION_PERIOD) || {};\n\n      return Number(setting?.value || setting?.default);\n    },\n\n    affinityLabels() {\n      return {\n        namespaceInputLabel:      this.t('harvester.virtualMachine.affinity.namespaces.label'),\n        namespaceSelectionLabels: [\n          this.t('harvester.virtualMachine.affinity.thisPodNamespace'),\n          this.t('workload.scheduling.affinity.allNamespaces'),\n          this.t('harvester.virtualMachine.affinity.matchExpressions.inNamespaces')\n        ],\n        addLabel:               this.t('harvester.virtualMachine.affinity.addLabel'),\n        topologyKeyPlaceholder: this.t('harvester.virtualMachine.affinity.topologyKey.placeholder')\n      };\n    },\n  },\n\n  async created() {\n    await this.$store.dispatch(`${ this.inStore }/findAll`, { type: SECRET });\n    this.getInitConfig({ value: this.value, init: this.isCreate });\n  },\n\n  methods: {\n    getInitConfig(config) {\n      const {\n        value, existUserData, fromTemplate = false, init = false\n      } = config;\n\n      const vm = this.resourceType === HCI.VM ? value : this.resourceType === HCI.BACKUP ? this.value.status?.source : value.spec.vm;\n      const volumeBackups = this.resourceType === HCI.BACKUP ? this.value.status?.volumeBackups : null;\n\n      const spec = vm?.spec;\n\n      if (!spec) {\n        return;\n      }\n      const resources = spec.template.spec.domain.resources;\n\n      // If the user is created via yaml, there may be no \"resources.limits\": kubectl apply -f https://kubevirt.io/labs/manifests/vm.yaml\n      if (!resources?.limits || (resources?.limits && !resources?.limits?.memory && resources?.limits?.memory !== null)) {\n        spec.template.spec.domain.resources = {\n          ...spec.template.spec.domain.resources,\n          limits: {\n            ...spec.template.spec.domain.resources.limits,\n            memory: spec.template.spec.domain.resources.requests.memory\n          }\n        };\n      }\n\n      if (!vm.metadata.labels) {\n        vm.metadata.labels = {};\n      }\n      const maintenanceStrategy = vm.metadata.labels?.[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] || 'Migrate';\n\n      const runStrategy = spec.runStrategy || 'RerunOnFailure';\n      const machineType = value.machineType;\n      const cpu = spec.template.spec.domain?.cpu?.cores;\n      const memory = spec.template.spec.domain.resources.limits.memory;\n      const reservedMemory = vm.metadata?.annotations?.[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      const terminationGracePeriodSeconds = spec.template.spec?.terminationGracePeriodSeconds || this.defaultTerminationSetting;\n\n      const sshKey = this.getSSHFromAnnotation(spec) || [];\n\n      const imageId = this.getRootImageId(vm) || '';\n      const diskRows = this.getDiskRows(vm, volumeBackups);\n\n      const networkRows = this.getNetworkRows(vm, { fromTemplate, init });\n      const hasCreateVolumes = this.getHasCreatedVolumes(spec) || [];\n\n      let { userData = undefined, networkData = undefined } = this.getCloudInitNoCloud(spec);\n\n      if (this.resourceType === HCI.BACKUP) {\n        const secretBackups = this.value.status?.secretBackups;\n\n        if (secretBackups) {\n          const secretNetworkData = secretBackups[0]?.data?.networkdata || '';\n          const secretUserData = secretBackups[0]?.data?.userdata || '';\n\n          userData = base64Decode(secretUserData);\n          networkData = base64Decode(secretNetworkData);\n        }\n      }\n      const osType = this.getOsType(vm) || 'linux';\n\n      userData = this.isCreate && !existUserData && !this.isClone ? this.getInitUserData({ osType }) : userData;\n\n      const installUSBTablet = this.isInstallUSBTablet(spec);\n      const installAgent = this.hasInstallAgent(userData, osType, true);\n      const efiEnabled = this.isEfiEnabled(spec);\n      const tpmEnabled = this.isTpmEnabled(spec);\n      const tpmPersistentStateEnabled = this.isTPMPersistentStateEnabled(spec);\n      const efiPersistentStateEnabled = this.isEFIPersistentStateEnabled(spec);\n      const secureBoot = this.isSecureBoot(spec);\n      const cpuPinning = this.isCpuPinning(spec);\n\n      const secretRef = this.getSecret(spec);\n      const accessCredentials = this.getAccessCredentials(spec);\n\n      if (Object.prototype.hasOwnProperty.call(spec, 'running')) {\n        delete spec.running;\n        spec.runStrategy = 'RerunOnFailure';\n      }\n\n      this['spec'] = spec;\n      this['maintenanceStrategy'] = maintenanceStrategy;\n      this['runStrategy'] = runStrategy;\n      this['secretRef'] = secretRef;\n      this['accessCredentials'] = accessCredentials;\n      this['userScript'] = userData;\n      this['networkScript'] = networkData;\n\n      this['sshKey'] = sshKey;\n      this['osType'] = osType;\n      this['installAgent'] = installAgent;\n\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n      this['reservedMemory'] = reservedMemory;\n      this['machineType'] = machineType;\n      this['terminationGracePeriodSeconds'] = terminationGracePeriodSeconds;\n\n      this['installUSBTablet'] = installUSBTablet;\n      this['efiEnabled'] = efiEnabled;\n      this['efiPersistentStateEnabled'] = efiPersistentStateEnabled;\n      this['tpmEnabled'] = tpmEnabled;\n      this['tpmPersistentStateEnabled'] = tpmPersistentStateEnabled;\n      this['secureBoot'] = secureBoot;\n      this['cpuPinning'] = cpuPinning;\n\n      this['hasCreateVolumes'] = hasCreateVolumes;\n      this['networkRows'] = networkRows;\n      this['imageId'] = imageId;\n\n      this['diskRows'] = diskRows;\n\n      this.refreshYamlEditor();\n    },\n\n    getDiskRows(vm, volBackups) {\n      const namespace = vm.metadata.namespace;\n      const _volumes = vm.spec.template.spec.volumes || [];\n      const _disks = vm.spec.template.spec.domain.devices.disks || [];\n      const _volumeClaimTemplates = parseVolumeClaimTemplates(vm);\n\n      let out = [];\n\n      if (_disks.length === 0) {\n        let bus = 'virtio';\n        let type = HARD_DISK;\n        let size = '10Gi';\n\n        const imageResource = this.images.find( (I) => this.imageId === I.id);\n\n        const isIsoImage = /iso$/i.test(imageResource?.imageSuffix);\n        const imageSize = Math.max(imageResource?.status?.size, imageResource?.status?.virtualSize);\n        const isEncrypted = imageResource?.isEncrypted || false;\n        const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === 'disk-0') || null ;\n\n        if (isIsoImage) {\n          bus = 'sata';\n          type = CD_ROM;\n        }\n\n        if (imageSize) {\n          let imageSizeGiB = Math.ceil(imageSize / 1024 / 1024 / 1024);\n\n          if (!isIsoImage) {\n            imageSizeGiB = Math.max(imageSizeGiB, 10);\n          }\n          size = `${ imageSizeGiB }${ GIBIBYTE }`;\n        }\n\n        out.push({\n          id:               randomStr(5),\n          source:           SOURCE_TYPE.IMAGE,\n          name:             'disk-0',\n          accessMode:       'ReadWriteMany', // root disk only support LHv1 volume, should be RWX\n          bus,\n          volumeName:       '',\n          size,\n          type,\n          storageClassName: '',\n          image:            this.imageId,\n          volumeMode:       VOLUME_MODE.BLOCK,\n          isEncrypted,\n          volumeBackups,\n        });\n      } else {\n        out = _disks.map( (DISK, index) => {\n          const volume = _volumes.find( (V) => V.name === DISK.name );\n\n          let size = '';\n          let image = '';\n          let source = '';\n          let realName = '';\n          let container = '';\n          let volumeName = '';\n          let accessMode = '';\n          let volumeMode = '';\n          let storageClassName = '';\n          let hotpluggable = false;\n          let dataSource = null;\n\n          const type = DISK?.cdrom ? CD_ROM : DISK?.disk ? HARD_DISK : '';\n\n          if (volume?.containerDisk) { // SOURCE_TYPE.CONTAINER\n            source = SOURCE_TYPE.CONTAINER;\n            container = volume.containerDisk.image;\n          }\n\n          if (volume.persistentVolumeClaim && volume.persistentVolumeClaim?.claimName) {\n            volumeName = volume.persistentVolumeClaim.claimName;\n            const DVT = _volumeClaimTemplates.find( (T) => T.metadata.name === volumeName);\n\n            realName = volumeName;\n            // If the DVT can be found, it cannot be an existing volume\n            if (DVT) {\n              // has annotation (HCI_ANNOTATIONS.IMAGE_ID) => SOURCE_TYPE.IMAGE\n              if (DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID] !== undefined) {\n                image = DVT.metadata?.annotations?.[HCI_ANNOTATIONS.IMAGE_ID];\n                source = SOURCE_TYPE.IMAGE;\n              } else {\n                source = SOURCE_TYPE.NEW;\n              }\n\n              const dataVolumeSpecPVC = DVT?.spec || {};\n\n              volumeMode = dataVolumeSpecPVC?.volumeMode;\n              accessMode = dataVolumeSpecPVC?.accessModes?.[0];\n              size = dataVolumeSpecPVC?.resources?.requests?.storage || '10Gi';\n              storageClassName = dataVolumeSpecPVC?.storageClassName;\n              dataSource = dataVolumeSpecPVC?.dataSource;\n            } else {\n              // SOURCE_TYPE.ATTACH_VOLUME\n              // Compatible with VMS that have been created before, Because they're not saved in the annotation\n              const allPVCs = this.$store.getters['harvester/all'](PVC);\n              const pvcResource = allPVCs.find( (O) => O.id === `${ namespace }/${ volume?.persistentVolumeClaim?.claimName }`);\n\n              source = SOURCE_TYPE.ATTACH_VOLUME;\n              accessMode = pvcResource?.spec?.accessModes?.[0] || 'ReadWriteMany';\n              size = pvcResource?.spec?.resources?.requests?.storage || '10Gi';\n              storageClassName = pvcResource?.spec?.storageClassName;\n              volumeMode = pvcResource?.spec?.volumeMode || VOLUME_MODE.BLOCK;\n              volumeName = pvcResource?.metadata?.name || '';\n            }\n\n            hotpluggable = volume.persistentVolumeClaim.hotpluggable || false;\n          }\n\n          const bus = DISK?.disk?.bus || DISK?.cdrom?.bus;\n\n          const bootOrder = DISK?.bootOrder ? DISK?.bootOrder : index;\n\n          const parseValue = parseSi(size);\n\n          const formatSize = formatSi(parseValue, {\n            increment:   1024,\n            addSuffix:   false,\n            maxExponent: 3,\n            minExponent: 3,\n          });\n\n          const pvc = this.pvcs.find((P) => P.id === `${ this.value.metadata.namespace }/${ volumeName }`);\n\n          const volumeStatus = pvc?.relatedPV?.metadata?.annotations?.[HCI_ANNOTATIONS.VOLUME_ERROR];\n\n          const isEncrypted = pvc?.isEncrypted || false;\n          const volumeBackups = volBackups?.find((vBackup) => vBackup.volumeName === DISK.name) || null;\n\n          return {\n            id:         randomStr(5),\n            bootOrder,\n            source,\n            name:       DISK.name,\n            realName,\n            bus,\n            volumeName,\n            container,\n            accessMode,\n            size:       `${ formatSize }${ GIBIBYTE }`,\n            volumeMode: volumeMode || this.customVolumeMode,\n            image,\n            type,\n            storageClassName,\n            hotpluggable,\n            volumeStatus,\n            dataSource,\n            namespace,\n            isEncrypted,\n            volumeBackups,\n          };\n        });\n      }\n\n      out = sortBy(out, 'bootOrder');\n\n      return out.filter( (O) => O.name !== 'cloudinitdisk');\n    },\n\n    getNetworkRows(vm, config) {\n      const { fromTemplate = false, init = false } = config;\n\n      const networks = vm.spec.template.spec.networks || [];\n      const interfaces = vm.spec.template.spec.domain.devices.interfaces || [];\n\n      const out = interfaces.map( (I, index) => {\n        const network = networks.find( (N) => I.name === N.name);\n\n        const type = I.sriov ? 'sriov' : I.bridge ? 'bridge' : 'masquerade';\n\n        const isPod = !!network.pod;\n\n        return {\n          ...I,\n          index,\n          type,\n          isPod,\n          newCreateId: (fromTemplate || init) ? randomStr(10) : false,\n          model:       I.model,\n          networkName: isPod ? MANAGEMENT_NETWORK : network?.multus?.networkName,\n        };\n      });\n\n      return out;\n    },\n\n    parseVM() {\n      this.userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n      this.parseOther();\n      this.parseAccessCredentials();\n      this.parseNetworkRows(this.networkRows);\n      this.parseDiskRows(this.diskRows);\n    },\n\n    parseOther() {\n      if (!this.spec.template.spec.domain.machine) {\n        this.spec.template.spec.domain['machine'] = { type: this.machineType };\n      } else {\n        this.spec.template.spec.domain.machine['type'] = this.machineType;\n      }\n\n      this.spec.template.spec.domain.cpu.cores = this.cpu;\n      this.spec.template.spec.domain.resources.limits.cpu = this.cpu ? this.cpu.toString() : this.cpu;\n      this.spec.template.spec.domain.resources.limits.memory = this.memory;\n      this.spec.template.spec.terminationGracePeriodSeconds = this.terminationGracePeriodSeconds;\n\n      // parse reserved memory\n      const vm = this.resourceType === HCI.VM ? this.value : this.value.spec.vm;\n\n      if (!this.reservedMemory) {\n        delete vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY];\n      } else {\n        vm.metadata.annotations[HCI_ANNOTATIONS.VM_RESERVED_MEMORY] = this.reservedMemory;\n      }\n\n      if (this.maintenanceStrategy === 'Migrate') {\n        delete vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY];\n      } else {\n        vm.metadata.labels[HCI_ANNOTATIONS.VM_MAINTENANCE_MODE_STRATEGY] = this.maintenanceStrategy;\n      }\n    },\n\n    parseDiskRows(disk) {\n      const disks = [];\n      const volumes = [];\n      const diskNameLables = [];\n      const volumeClaimTemplates = [];\n\n      disk.forEach( (R, index) => {\n        const prefixName = this.value.metadata?.name || '';\n\n        let dataVolumeName = '';\n\n        if (R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n          dataVolumeName = R.volumeName;\n        } else if (this.isClone || !this.hasCreateVolumes.includes(R.realName)) {\n          dataVolumeName = `${ prefixName }-${ R.name }-${ randomStr(5).toLowerCase() }`;\n        } else {\n          dataVolumeName = R.realName;\n        }\n\n        const _disk = this.parseDisk(R, index);\n        const _volume = this.parseVolume(R, dataVolumeName);\n        const _dataVolumeTemplate = this.parseVolumeClaimTemplate(R, dataVolumeName);\n\n        disks.push(_disk);\n        volumes.push(_volume);\n        diskNameLables.push(dataVolumeName);\n\n        if (R.source !== SOURCE_TYPE.CONTAINER) {\n          volumeClaimTemplates.push(_dataVolumeTemplate);\n        }\n      });\n\n      if (!this.secretName || this.needNewSecret) {\n        this.secretName = this.generateSecretName(this.secretNamePrefix);\n      }\n\n      if (!disks.find( (D) => D.name === 'cloudinitdisk') && (this.userData || this.networkData)) {\n        if (!this.isWindows) {\n          disks.push({\n            name: 'cloudinitdisk',\n            disk: { bus: 'virtio' }\n          });\n\n          const userData = this.getUserData({ osType: this.osType, installAgent: this.installAgent });\n\n          const cloudinitdisk = {\n            name:             'cloudinitdisk',\n            cloudInitNoCloud: {}\n          };\n\n          if (this.saveUserDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.userData = userData;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.secretRef = { name: this.secretName };\n          }\n\n          if (this.saveNetworkDataAsClearText) {\n            cloudinitdisk.cloudInitNoCloud.networkData = this.networkScript;\n          } else {\n            cloudinitdisk.cloudInitNoCloud.networkDataSecretRef = { name: this.secretName };\n          }\n\n          volumes.push(cloudinitdisk);\n        }\n      }\n\n      let spec = {\n        ...this.spec,\n        runStrategy: this.runStrategy,\n        template:    {\n          ...this.spec.template,\n          metadata: {\n            ...this.spec?.template?.metadata,\n            annotations: {\n              ...this.spec?.template?.metadata?.annotations,\n              [HCI_ANNOTATIONS.SSH_NAMES]: JSON.stringify(this.sshKey)\n            },\n            labels: {\n              ...this.spec?.template?.metadata?.labels,\n              [HCI_ANNOTATIONS.VM_NAME]: this.value?.metadata?.name,\n            }\n          },\n          spec: {\n            ...this.spec.template?.spec,\n            domain: {\n              ...this.spec.template?.spec?.domain,\n              devices: {\n                ...this.spec.template?.spec?.domain?.devices,\n                disks,\n              },\n            },\n            volumes,\n          }\n        }\n      };\n\n      if (volumes.length === 0) {\n        delete spec.template.spec.volumes;\n      }\n\n      if (this.resourceType === HCI.VM) {\n        if (!this.isSingle) {\n          spec = this.multiVMScheduler(spec);\n        }\n\n        this.value.metadata['annotations'] = {\n          ...this.value.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n          [HCI_ANNOTATIONS.NETWORK_IPS]:           JSON.stringify(this.value.networkIps)\n        };\n\n        this.value.metadata['labels'] = {\n          ...this.value.metadata.labels,\n          [HCI_ANNOTATIONS.CREATOR]: 'harvester',\n          [HCI_ANNOTATIONS.OS]:      this.osType\n        };\n\n        this.value['spec'] = spec;\n        this['spec'] = spec;\n      } else if (this.resourceType === HCI.VM_VERSION) {\n        this.value.spec.vm['spec'] = spec;\n        this.value.spec.vm.metadata['annotations'] = {\n          ...this.value.spec.vm.metadata.annotations,\n          [HCI_ANNOTATIONS.VOLUME_CLAIM_TEMPLATE]: JSON.stringify(volumeClaimTemplates),\n        };\n        this.value.spec.vm.metadata['labels'] = {\n          ...this.value.spec.vm.metadata.labels,\n          [HCI_ANNOTATIONS.OS]: this.osType\n        };\n        this['spec'] = spec;\n      }\n    },\n\n    removeTrailingHyphen(str) {\n      while (str.endsWith('-')) {\n        str = str.slice(0, -1);\n      }\n\n      return str;\n    },\n\n    multiVMScheduler(spec) {\n      const namePrefix = this.removeTrailingHyphen(this.namePrefix);\n\n      spec.template.metadata.labels[HCI_ANNOTATIONS.VM_NAME_PREFIX] = namePrefix;\n\n      const rule = {\n        weight:          1,\n        podAffinityTerm: {\n          topologyKey:   HOSTNAME,\n          labelSelector: { matchLabels: { [HCI_ANNOTATIONS.VM_NAME_PREFIX]: namePrefix } }\n        }\n      };\n\n      return {\n        ...spec,\n        template: {\n          ...spec.template,\n          spec: {\n            ...spec.template.spec,\n            affinity: {\n              ...spec.template.spec.affinity,\n              podAntiAffinity: {\n                ...spec.template.spec?.affinity?.podAntiAffinity,\n                preferredDuringSchedulingIgnoredDuringExecution: [\n                  ...(spec.template.spec?.affinity?.podAntiAffinity?.preferredDuringSchedulingIgnoredDuringExecution || []),\n                  rule\n                ]\n              }\n            }\n          }\n        }\n      };\n    },\n\n    parseNetworkRows(networkRow) {\n      const networks = [];\n      const interfaces = [];\n\n      networkRow.forEach( (R) => {\n        const _network = this.parseNetwork(R);\n        const _interface = this.parseInterface(R);\n\n        networks.push(_network);\n        interfaces.push(_interface);\n      });\n\n      const spec = {\n        ...this.spec.template.spec,\n        domain: {\n          ...this.spec.template.spec.domain,\n          devices: {\n            ...this.spec.template.spec.domain.devices,\n            interfaces,\n          },\n        },\n        networks\n      };\n\n      this.spec.template['spec'] = spec;\n    },\n\n    parseAccessCredentials() {\n      const out = [];\n      const annotations = {};\n      const users = JSON.parse(this.spec?.template?.metadata?.annotations?.[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] || '[]');\n\n      for (const row of this.accessCredentials) {\n        if (this.needNewSecret) {\n          row.secretName = this.generateSecretName(this.secretNamePrefix);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          users.push(row.username);\n          out.push({\n            userPassword: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { } }\n            }\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          users.push(...row.users);\n          annotations[row.secretName] = row.sshkeys;\n          out.push({\n            sshPublicKey: {\n              source:            { secret: { secretName: row.secretName } },\n              propagationMethod: { qemuGuestAgent: { users: row.users } }\n            }\n          });\n        }\n      }\n\n      if (out.length === 0 && !!this.spec.template.spec.accessCredentials) {\n        delete this.spec.template.spec.accessCredentials;\n      } else {\n        this.spec.template.spec.accessCredentials = out;\n      }\n\n      if (users.length !== 0) {\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_USERS] = JSON.stringify(Array.from(new Set(users)));\n        this.spec.template.metadata.annotations[HCI_ANNOTATIONS.DYNAMIC_SSHKEYS_NAMES] = JSON.stringify(annotations);\n      }\n    },\n\n    getMaintenanceStrategyOptionLabel(opt) {\n      return this.t(`harvester.virtualMachine.maintenanceStrategy.options.${ opt.label || opt }`);\n    },\n\n    getInitUserData(config) {\n      const _QGA_JSON = this.getMatchQGA(config.osType);\n\n      const out = jsyaml.dump(_QGA_JSON);\n\n      return `#cloud-config\\n${ out }`;\n    },\n\n    /**\n     * Generate user data yaml which is decided by the\n     * \"Install guest agent\", \"OS type\", \"SSH keys\" and user input.\n     * @param config\n     */\n    getUserData(config) {\n      try {\n        // https://github.com/eemeli/yaml/issues/136\n        let userDataDoc = this.userScript ? YAML.parseDocument(this.userScript) : YAML.parseDocument({});\n\n        const allSSHAuthorizedKeys = this.mergeSSHAuthorizedKeys(this.userScript);\n\n        if (allSSHAuthorizedKeys.length > 0) {\n          userDataDoc.setIn(['ssh_authorized_keys'], allSSHAuthorizedKeys);\n        } else if (YAML.isCollection(userDataDoc.getIn('ssh_authorized_keys'))) {\n          userDataDoc.deleteIn(['ssh_authorized_keys']);\n        }\n\n        userDataDoc = config.installAgent ? this.mergeQGA({ userDataDoc, ...config }) : this.deleteQGA({ userDataDoc, ...config });\n        const userDataYaml = userDataDoc.toString();\n\n        if (userDataYaml === '{}\\n') {\n          // When the YAML parsed value is '{}\\n', it means that the userData is empty, then undefined is returned.\n          return undefined;\n        }\n\n        return userDataYaml;\n      } catch (e) {\n        console.error('Error: Unable to parse yaml document', e); // eslint-disable-line no-console\n\n        return this.userScript;\n      }\n    },\n\n    updateSSHKey(neu) {\n      this['sshKey'] = neu;\n    },\n\n    updateCpuMemory(cpu, memory) {\n      this['cpu'] = cpu;\n      this['memory'] = memory;\n    },\n\n    parseDisk(R, index) {\n      const out = { name: R.name };\n\n      if (R.type === HARD_DISK) {\n        out.disk = { bus: R.bus };\n      } else if (R.type === CD_ROM) {\n        out.cdrom = { bus: R.bus };\n      }\n\n      out.bootOrder = index + 1;\n\n      return out;\n    },\n\n    parseVolume(R, dataVolumeName) {\n      const out = { name: R.name };\n\n      if (R.source === SOURCE_TYPE.CONTAINER) {\n        out.containerDisk = { image: R.container };\n      } else if (R.source === SOURCE_TYPE.IMAGE || R.source === SOURCE_TYPE.NEW || R.source === SOURCE_TYPE.ATTACH_VOLUME) {\n        out.persistentVolumeClaim = { claimName: dataVolumeName };\n        if (R.hotpluggable) {\n          out.persistentVolumeClaim.hotpluggable = true;\n        }\n      }\n\n      return out;\n    },\n\n    parseVolumeClaimTemplate(R, dataVolumeName) {\n      if (!String(R.size).includes('Gi') && R.size) {\n        R.size = `${ R.size }${ GIBIBYTE }`;\n      }\n\n      const out = {\n        metadata: { name: dataVolumeName },\n        spec:     {\n          accessModes: [R.accessMode],\n          resources:   { requests: { storage: R.size } },\n          volumeMode:  R.volumeMode\n        }\n      };\n\n      if (R.dataSource) {\n        out.spec.dataSource = R.dataSource;\n      }\n\n      switch (R.source) {\n      case SOURCE_TYPE.ATTACH_VOLUME:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.NEW:\n        out.spec.storageClassName = R.storageClassName;\n        break;\n      case SOURCE_TYPE.IMAGE: {\n        const image = this.images.find( (I) => R.image === I.id);\n\n        if (image) {\n          out.spec.storageClassName = image.storageClassName;\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: image.id };\n        } else {\n          out.metadata.annotations = { [HCI_ANNOTATIONS.IMAGE_ID]: '' };\n        }\n\n        break;\n      }\n      }\n\n      return out;\n    },\n\n    getSSHListValue(arr) {\n      return arr.map( (id) => this.getSSHValue(id)).filter( (O) => O !== undefined);\n    },\n\n    parseInterface(R) {\n      const _interface = {};\n      const type = R.type;\n\n      _interface[type] = {};\n\n      if (R.macAddress) {\n        _interface.macAddress = R.macAddress;\n      }\n\n      _interface.model = R.model;\n      _interface.name = R.name;\n\n      return _interface;\n    },\n\n    parseNetwork(R) {\n      const out = { name: R.name };\n\n      if (R.isPod) {\n        out.pod = {};\n      } else {\n        out.multus = { networkName: R.networkName };\n      }\n\n      return out;\n    },\n\n    updateUserData(value) {\n      this.userScript = value;\n    },\n\n    updateNetworkData(value) {\n      this.networkScript = value;\n    },\n\n    mergeSSHAuthorizedKeys(yaml) {\n      try {\n        const sshAuthorizedKeys = YAML.parseDocument(yaml)\n          .get('ssh_authorized_keys')\n          ?.toJSON() || [];\n\n        const sshList = this.getSSHListValue(this.sshKey);\n\n        return sshAuthorizedKeys.length ? [...new Set([...sshList, ...sshAuthorizedKeys])] : sshList;\n      } catch (e) {\n        return [];\n      }\n    },\n\n    /**\n     * @param paths A Object path, e.g. 'a.b.c' => ['a', 'b', 'c']. Refer to https://eemeli.org/yaml/#scalar-values\n     * @returns\n     */\n    deleteYamlDocProp(doc, paths) {\n      try {\n        const item = doc.getIn([])?.items[0];\n        const key = item?.key;\n        const hasCloudConfigComment = !!key?.commentBefore?.includes('cloud-config');\n        const isMatchProp = key.source === paths[paths.length - 1];\n\n        if (key && hasCloudConfigComment && isMatchProp) {\n          // Comments are mounted on the next node and we should not delete the node containing cloud-config\n        } else {\n          doc.deleteIn(paths);\n        }\n      } catch (e) {}\n    },\n\n    mergeQGA(config) {\n      const { osType, userDataDoc } = config;\n      const _QGA_JSON = this.getMatchQGA(osType);\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      let packages = userDataJSON?.packages || [];\n      let runcmd = userDataJSON?.runcmd || [];\n\n      userDataDoc.setIn(['package_update'], true);\n\n      if (Array.isArray(packages)) {\n        if (!packages.includes('qemu-guest-agent')) {\n          packages.push('qemu-guest-agent');\n        }\n      } else {\n        packages = QGA_JSON.packages;\n      }\n\n      if (Array.isArray(runcmd)) {\n        let findIndex = -1;\n        const hasSameRuncmd = runcmd.find( (S) => Array.isArray(S) && S.join('-') === _QGA_JSON.runcmd[0].join('-'));\n\n        const hasSimilarRuncmd = runcmd.find( (S, index) => {\n          if (Array.isArray(S) && S.join('-') === this.getSimilarRuncmd(osType).join('-')) {\n            findIndex = index;\n\n            return true;\n          }\n\n          return false;\n        });\n\n        if (hasSimilarRuncmd) {\n          runcmd[findIndex] = _QGA_JSON.runcmd[0];\n        } else if (!hasSameRuncmd) {\n          runcmd.push(_QGA_JSON.runcmd[0]);\n        }\n      } else {\n        runcmd = _QGA_JSON.runcmd;\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []); // It needs to be set empty first, as it is possible that cloud-init comments are mounted on this node\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    deleteQGA(config) {\n      const { osType, userDataDoc, deletePackage = false } = config;\n\n      const userDataTemplateValue = this.$store.getters['harvester/byId'](CONFIG_MAP, this.userDataTemplateId)?.data?.cloudInit || '';\n\n      const userDataYAML = userDataDoc.toString();\n      const userDataJSON = YAML.parse(userDataYAML);\n      const packages = userDataJSON?.packages || [];\n      const runcmd = userDataJSON?.runcmd || [];\n\n      if (Array.isArray(packages) && deletePackage) {\n        const templateHasQGAPackage = this.convertToJson(userDataTemplateValue);\n\n        for (let i = 0; i < packages.length; i++) {\n          if (packages[i] === 'qemu-guest-agent') {\n            if (!(Array.isArray(templateHasQGAPackage?.packages) && templateHasQGAPackage.packages.includes('qemu-guest-agent'))) {\n              packages.splice(i, 1);\n            }\n          }\n        }\n      }\n\n      if (Array.isArray(runcmd)) {\n        const _QGA_JSON = this.getMatchQGA(osType);\n\n        for (let i = 0; i < runcmd.length; i++) {\n          if (Array.isArray(runcmd[i]) && runcmd[i].join('-') === _QGA_JSON.runcmd[0].join('-')) {\n            runcmd.splice(i, 1);\n          }\n        }\n      }\n\n      if (packages.length > 0) {\n        userDataDoc.setIn(['packages'], packages);\n      } else {\n        userDataDoc.setIn(['packages'], []);\n        this.deleteYamlDocProp(userDataDoc, ['packages']);\n        this.deleteYamlDocProp(userDataDoc, ['package_update']);\n      }\n\n      if (runcmd.length > 0) {\n        userDataDoc.setIn(['runcmd'], runcmd);\n      } else {\n        this.deleteYamlDocProp(userDataDoc, ['runcmd']);\n      }\n\n      return userDataDoc;\n    },\n\n    generateSecretName(name) {\n      return name ? `${ name }-${ randomStr(5).toLowerCase() }` : undefined;\n    },\n\n    getOwnerReferencesFromVM(resource) {\n      const name = resource.metadata.name;\n      const kind = resource.kind;\n      const apiVersion = this.resourceType === HCI.VM ? 'kubevirt.io/v1' : 'harvesterhci.io/v1beta1';\n      const uid = resource?.metadata?.uid;\n\n      return [{\n        name,\n        kind,\n        uid,\n        apiVersion,\n      }];\n    },\n\n    async saveSecret(vm) {\n      if (!vm?.spec || !this.secretName || this.isWindows) {\n        return true;\n      }\n\n      let secret = this.getSecret(vm.spec);\n\n      if (!secret && this.isEdit && this.secretRef) {\n        // When editing the vm, if the userData and networkData are deleted, we also need to clean up the secret values\n        secret = this.secretRef;\n      }\n\n      if (!secret || this.needNewSecret) {\n        secret = await this.$store.dispatch('harvester/create', {\n          metadata: {\n            name:            this.secretName,\n            namespace:       this.value.metadata.namespace,\n            labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n            ownerReferences: this.getOwnerReferencesFromVM(vm)\n          },\n          type: SECRET\n        });\n      }\n\n      try {\n        if (secret) {\n          // If none of the data comes from the secret, then no data needs to be saved to the secret\n          if (!this.saveUserDataAsClearText || !this.saveNetworkDataAsClearText) {\n            secret.setData('userdata', this.userData || '');\n            secret.setData('networkdata', this.networkScript || '');\n            await secret.save();\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    async saveAccessCredentials(vm) {\n      if (!vm?.spec) {\n        return true;\n      }\n\n      // save\n      const toSave = [];\n\n      for (const row of this.accessCredentials) {\n        let secretRef = row.secretRef;\n\n        if (!secretRef || this.needNewSecret) {\n          secretRef = await this.$store.dispatch('harvester/create', {\n            metadata: {\n              name:            row.secretName,\n              namespace:       vm.metadata.namespace,\n              labels:          { [HCI_ANNOTATIONS.CLOUD_INIT]: 'harvester' },\n              ownerReferences: this.getOwnerReferencesFromVM(vm)\n            },\n            type: SECRET\n          });\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.RESET_PWD) {\n          secretRef.setData(row.username, row.newPassword);\n        }\n\n        if (row.source === ACCESS_CREDENTIALS.INJECT_SSH) {\n          for (const secretId of row.sshkeys) {\n            const keypair = (this.$store.getters['harvester/all'](HCI.SSH) || []).find((s) => s.id === secretId);\n\n            secretRef.setData(`${ keypair.metadata.namespace }-${ keypair.metadata.name }`, keypair.spec.publicKey);\n          }\n        }\n\n        toSave.push(secretRef);\n      }\n\n      try {\n        for (const resource of toSave) {\n          await resource.save();\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    },\n\n    getAccessCredentialsValidation() {\n      const errors = [];\n\n      for (let i = 0; i < this.accessCredentials.length; i++) {\n        const row = this.accessCredentials[i];\n        const source = row.source;\n\n        if (source === ACCESS_CREDENTIALS.RESET_PWD) {\n          if (!row.username) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.newPassword) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (row.newPassword && row.newPassword.length < 6) {\n            const fieldName = this.t('harvester.virtualMachine.input.password');\n            const message = this.t('validation.number.min', { key: fieldName, val: '6' });\n\n            errors.push(message);\n          }\n        } else {\n          if (!row.users || row.users.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.username');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n\n          if (!row.sshkeys || row.sshkeys.length === 0) {\n            const fieldName = this.t('harvester.virtualMachine.input.sshKeyValue');\n            const message = this.t('validation.required', { key: fieldName });\n\n            errors.push(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          break;\n        }\n      }\n\n      return errors;\n    },\n\n    getHasCreatedVolumes(spec) {\n      const out = [];\n\n      if (spec.template.spec.volumes) {\n        spec.template.spec.volumes.forEach((V) => {\n          if (V?.persistentVolumeClaim?.claimName) {\n            out.push(V.persistentVolumeClaim.claimName);\n          }\n        });\n      }\n\n      return out;\n    },\n\n    handlerUSBTablet(val) {\n      const hasExist = this.isInstallUSBTablet(this.spec);\n      const inputs = this.spec.template.spec.domain.devices?.inputs || [];\n\n      if (val && !hasExist) {\n        if (inputs.length > 0) {\n          inputs.push(USB_TABLET[0]);\n        } else {\n          Object.assign(this.spec.template.spec.domain.devices, {\n            inputs: [\n              USB_TABLET[0]\n            ]\n          });\n        }\n      } else if (!val) {\n        const index = inputs.findIndex((O) => isEqual(O, USB_TABLET[0]));\n\n        if (hasExist && inputs.length === 1) {\n          delete this.spec.template.spec.domain.devices['inputs'];\n        } else if (hasExist) {\n          inputs.splice(index, 1);\n          this.spec.template.spec.domain.devices['inputs'] = inputs;\n        }\n      }\n    },\n\n    setBootMethod(boot = {\n      efi: false, secureBoot: false, efiPersistentStateEnabled: false\n    }) {\n      if (boot.efi) {\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.secureBoot', boot.secureBoot);\n      } else {\n        delete this.spec.template.spec.domain['firmware'];\n        delete this.spec.template.spec.domain.features['smm'];\n\n        return;\n      }\n\n      if (boot.secureBoot) {\n        set(this.spec.template.spec.domain, 'features.smm.enabled', true);\n      } else {\n        try {\n          delete this.spec.template.spec.domain.features.smm['enabled'];\n          const noKeys = Object.keys(this.spec.template.spec.domain.features.smm).length === 0;\n\n          if (noKeys) {\n            delete this.spec.template.spec.domain.features['smm'];\n          }\n        } catch (e) {}\n      }\n\n      if (boot.efiPersistentStateEnabled) {\n        set(this.spec.template.spec.domain, 'firmware.bootloader.efi.persistent', true);\n      } else {\n        delete this.spec.template.spec.domain.firmware.bootloader.efi['persistent'];\n      }\n    },\n\n    setCpuPinning(value) {\n      if (value) {\n        set(this.spec.template.spec.domain.cpu, 'dedicatedCpuPlacement', true);\n      } else {\n        delete this.spec.template.spec.domain.cpu['dedicatedCpuPlacement'];\n      }\n    },\n\n    setTPM({ tpmEnabled = false, tpmPersistentStateEnabled = false } = {}) {\n      if (tpmEnabled) {\n        set(this.spec.template.spec.domain.devices, 'tpm', tpmPersistentStateEnabled ? { persistent: true } : {});\n      } else {\n        delete this.spec.template.spec.domain.devices['tpm'];\n      }\n    },\n\n    deleteSSHFromUserData(ssh = []) {\n      const sshAuthorizedKeys = this.getSSHFromUserData(this.userScript);\n\n      ssh.map((id) => {\n        const index = sshAuthorizedKeys.findIndex((value) => value === this.getSSHValue(id));\n\n        if (index >= 0) {\n          sshAuthorizedKeys.splice(index, 1);\n        }\n      });\n\n      const userDataJson = this.convertToJson(this.userScript);\n\n      userDataJson.ssh_authorized_keys = sshAuthorizedKeys;\n\n      if (sshAuthorizedKeys.length === 0) {\n        delete userDataJson.ssh_authorized_keys;\n      }\n\n      if (isEmpty(userDataJson)) {\n        this['userScript'] = undefined;\n      } else {\n        this['userScript'] = jsyaml.dump(userDataJson);\n      }\n\n      this.refreshYamlEditor();\n    },\n\n    refreshYamlEditor() {\n      this.$nextTick(() => {\n        this.$refs.yamlEditor?.updateValue();\n      });\n    },\n\n    toggleAdvanced() {\n      this.showAdvanced = !this.showAdvanced;\n    },\n\n    updateAgent(value) {\n      if (!value) {\n        this.deletePackage = true;\n      }\n    },\n\n    updateDataTemplateId(type, id) {\n      if (type === 'user') {\n        const oldInstallAgent = this.installAgent;\n\n        this.userDataTemplateId = id;\n        this.$nextTick(() => {\n          if (oldInstallAgent) {\n            this.installAgent = oldInstallAgent;\n          }\n        });\n      }\n    },\n\n    updateReserved(value = {}) {\n      const { memory } = value;\n\n      this['reservedMemory'] = memory;\n    },\n\n    updateTerminationGracePeriodSeconds(value) {\n      this['terminationGracePeriodSeconds'] = value;\n    },\n  },\n\n  watch: {\n    diskRows: {\n      handler(neu, old) {\n        if (Array.isArray(neu)) {\n          const imageId = neu[0]?.image;\n          const image = this.images.find( (I) => imageId === I.id);\n          const osType = image?.imageOSType;\n\n          const oldImageId = old[0]?.image;\n\n          if (this.isCreate && oldImageId === imageId && imageId) {\n            this.osType = osType;\n          }\n        }\n      }\n    },\n\n    secretRef: {\n      handler(secret) {\n        if (secret && this.resourceType !== HCI.BACKUP) {\n          this.secretName = secret?.metadata.name;\n        }\n      },\n      immediate: true,\n      deep:      true\n    },\n\n    isWindows(val) {\n      if (val) {\n        this['sshKey'] = [];\n        this['userScript'] = undefined;\n        this['installAgent'] = false;\n      }\n    },\n\n    installUSBTablet(val) {\n      this.handlerUSBTablet(val);\n    },\n\n    efiEnabled(val) {\n      this.setBootMethod({\n        efi: val, secureBoot: this.secureBoot, efiPersistentStateEnabled: this.efiPersistentStateEnabled\n      });\n    },\n\n    secureBoot(val) {\n      this.setBootMethod({\n        efi: this.efiEnabled, secureBoot: val, efiPersistentStateEnabled: this.efiPersistentStateEnabled\n      });\n    },\n\n    efiPersistentStateEnabled(val) {\n      this.setBootMethod({\n        efi: this.efiEnabled, secureBoot: this.secureBoot, efiPersistentStateEnabled: val\n      });\n    },\n\n    cpuPinning(value) {\n      this.setCpuPinning(value);\n    },\n\n    tpmEnabled(val) {\n      this.setTPM({ tpmEnabled: val, tpmPersistentStateEnabled: this.tpmPersistentStateEnabled });\n    },\n\n    tpmPersistentStateEnabled(val) {\n      this.setTPM({ tpmEnabled: this.tpmEnabled, tpmPersistentStateEnabled: val });\n    },\n\n    installAgent: {\n      /**\n       * rules\n       * 1. The value in user Data is the first priority\n       * 2. After selecting the template, if checkbox is checked, only merge operation will be performed on user data,\n       *    if checkbox is unchecked, no value will be deleted in user data\n       */\n      handler(neu) {\n        if (this.deleteAgent) {\n          let out = this.getUserData({\n            installAgent: neu, osType: this.osType, deletePackage: this.deletePackage\n          });\n\n          if (neu) {\n            const hasCloudComment = this.hasCloudConfigComment(out);\n\n            if (!hasCloudComment) {\n              out = `#cloud-config\\n${ out }`;\n            }\n          }\n\n          this['userScript'] = out;\n          this.refreshYamlEditor();\n        }\n        this.deleteAgent = true;\n        this.deletePackage = false;\n      }\n    },\n\n    osType(neu) {\n      const out = this.getUserData({ installAgent: this.installAgent, osType: neu });\n\n      this['userScript'] = out;\n      this.refreshYamlEditor();\n    },\n\n    userScript(neu, old) {\n      const hasInstallAgent = this.hasInstallAgent(neu, this.osType, this.installAgent);\n\n      if (hasInstallAgent !== this.installAgent) {\n        this.deleteAgent = false;\n        this.installAgent = hasInstallAgent;\n      }\n    },\n\n    sshKey(neu, old) {\n      // refresh yaml editor to get the latest userScript\n      this.userScript = this.getUserData({ installAgent: this.installAgent, osType: this.osType });\n      this.refreshYamlEditor();\n\n      const _diff = difference(old, neu);\n\n      if (_diff.length > 0 && this.isCreate) {\n        this.deleteSSHFromUserData(_diff);\n      }\n    }\n  }\n};\n"],"names":["key","_createElementBlock","$props","arbitrary","_hoisted_1","value","_createBlock","_component_BadgeState","color","$data","stateBackground","label","stateDisplay","_createCommentVNode","row","components","BadgeState","props","type","String","default","Object","required","col","Boolean","data","watch","handler","this","colorForState","replace","immediate","__exports__","render","QGA_JSON","package_update","packages","runcmd","QGA_MAP","USB_TABLET","bus","name","SSH_EXISTING_TYPE","EXISTING_ALL","EXISTING_ONLY_ANNOTATION","EXISTING_ONLY_CLOUD","methods","hasCloudConfigComment","userScript","userDataDoc","YAML","items","contents","exist","comment","includes","commentBefore","map","item","getSSHValue","id","inStore","$store","getters","sshs","HCI","SSH","find","O","spec","publicKey","undefined","getOsType","vm","metadata","labels","HCI_ANNOTATIONS","OS","getMatchQGA","osType","_QGA_JSON","clone","hasCustomQGA","forEach","match","getSimilarRuncmd","hasInstallAgent","oldValue","dataFormat","jsyaml","e","Error","S","Array","isArray","join","isInstallUSBTablet","inputs","template","domain","devices","isEqual","isEfiEnabled","firmware","bootloader","efi","isTpmEnabled","tpm","isTPMPersistentStateEnabled","persistent","isEFIPersistentStateEnabled","isSecureBoot","secureBoot","isCpuPinning","cpu","dedicatedCpuPlacement","getCloudInitNoCloud","secret","getSecret","userData","decodedData","userdata","networkData","networkdata","cloudInitNoCloud","volumes","V","saveUserDataAsClearText","saveNetworkDataAsClearText","secrets","SECRET","secretName","secretRef","networkDataSecretRef","s","getAccessCredentials","credentials","accessCredentials","annotations","JSON","parse","DYNAMIC_SSHKEYS_NAMES","c","source","userPassword","out","username","newPassword","users","sshkeys","keys","propagationMethod","qemuGuestAgent","getRootImageId","parseVolumeClaimTemplates","IMAGE_ID","getSSHFromAnnotation","ids","SSH_NAMES","convertToJson","script","getSSHFromUserData","ssh_authorized_keys","compareSSHValue","a","b","r","mergeAllSSHs","length","allSSHs","hasSSHResource","ssh","_userDataSSH","sshValue","push","LONGHORN_V2_DATA_ENGINE","MANAGEMENT_NETWORK","CD_ROM","HARD_DISK","mixins","impl","resourceType","fetch","hash","pvs","dispatch","PV","pvcs","PVC","storageClasses","STORAGE_CLASS","settings","SETTING","images","IMAGE","versions","VM_VERSION","templates","VM_TEMPLATE","networkAttachment","NETWORK_ATTACHMENT","vmis","VMI","vmims","VMIM","vms","VM","addons","ADD_ONS","longhornV2Engine","LONGHORN","SETTINGS","NODE","nodes","CLUSTER_NETWORK","clusterNetworks","VLAN_CONFIG","VOLUMES","longhornVolumes","res","allHash","hasPCISchema","PCI_DEVICE","hasSRIOVGPUSchema","SR_IOVGPU_DEVICE","enabledAddons","reduce","acc","addon","enabled","enabledPCI","PCI_DEVICE_CONTROLLER","enabledSriovgpu","NVIDIA_DRIVER_TOOLKIT_CONTROLLER","isClone","realMode","_CLONE","sshKey","maintenanceStrategies","maintenanceStrategy","runStrategies","runStrategy","installAgent","hasCreateVolumes","installUSBTablet","networkScript","imageId","diskRows","networkRows","machineType","showAdvanced","deleteAgent","memory","reservedMemory","efiEnabled","tpmEnabled","tpmPersistentStateEnabled","efiPersistentStateEnabled","userDataTemplateId","immutableMode","_CREATE","_VIEW","terminationGracePeriodSeconds","cpuPinning","computed","filteredNamespaces","NAMESPACE","filter","namespace","isSystem","nodesIdOptions","networkNames","n","networkName","vmNetworks","selectedVMNetworks","uniq","clusterNetworkResource","N","isUnSchedulable","isEtcd","node","requireLabelKeys","isNetworkSchedule","clusterNetwork","requireLabelKey","nameDisplay","t","disabled","storageClassSetting","storageClassValue","HCI_SETTING","DEFAULT_STORAGE_CLASS","customVolumeMode","volumeMode","VOLUME_MODE","BLOCK","customAccessMode","accessModes","isWindows","needNewSecret","isCreate","defaultTerminationSetting","setting","VM_TERMINATION_PERIOD","Number","affinityLabels","namespaceInputLabel","namespaceSelectionLabels","addLabel","topologyKeyPlaceholder","created","getInitConfig","init","config","existUserData","fromTemplate","BACKUP","status","volumeBackups","resources","limits","requests","VM_MAINTENANCE_MODE_STRATEGY","cores","VM_RESERVED_MEMORY","getDiskRows","getNetworkRows","getHasCreatedVolumes","secretBackups","secretNetworkData","secretUserData","base64Decode","getInitUserData","prototype","hasOwnProperty","call","running","refreshYamlEditor","volBackups","_volumes","_disks","disks","_volumeClaimTemplates","size","imageResource","I","isIsoImage","test","imageSuffix","imageSize","Math","max","virtualSize","isEncrypted","vBackup","volumeName","imageSizeGiB","ceil","GIBIBYTE","randomStr","SOURCE_TYPE","accessMode","storageClassName","image","DISK","index","volume","realName","container","hotpluggable","dataSource","cdrom","disk","containerDisk","CONTAINER","persistentVolumeClaim","claimName","DVT","T","NEW","dataVolumeSpecPVC","storage","allPVCs","pvcResource","ATTACH_VOLUME","bootOrder","parseValue","parseSi","formatSize","formatSi","increment","addSuffix","maxExponent","minExponent","pvc","P","volumeStatus","relatedPV","VOLUME_ERROR","sortBy","networks","interfaces","network","sriov","bridge","isPod","pod","newCreateId","model","multus","parseVM","getUserData","parseOther","parseAccessCredentials","parseNetworkRows","parseDiskRows","machine","toString","diskNameLables","volumeClaimTemplates","R","prefixName","dataVolumeName","toLowerCase","_disk","parseDisk","_volume","parseVolume","_dataVolumeTemplate","parseVolumeClaimTemplate","generateSecretName","secretNamePrefix","D","cloudinitdisk","stringify","VM_NAME","isSingle","multiVMScheduler","VOLUME_CLAIM_TEMPLATE","NETWORK_IPS","networkIps","CREATOR","removeTrailingHyphen","str","endsWith","slice","namePrefix","VM_NAME_PREFIX","rule","weight","podAffinityTerm","topologyKey","HOSTNAME","labelSelector","matchLabels","affinity","podAntiAffinity","preferredDuringSchedulingIgnoredDuringExecution","networkRow","_network","parseNetwork","_interface","parseInterface","DYNAMIC_SSHKEYS_USERS","ACCESS_CREDENTIALS","RESET_PWD","INJECT_SSH","sshPublicKey","from","Set","getMaintenanceStrategyOptionLabel","opt","allSSHAuthorizedKeys","mergeSSHAuthorizedKeys","setIn","getIn","deleteIn","mergeQGA","deleteQGA","userDataYaml","console","error","updateSSHKey","neu","updateCpuMemory","getSSHListValue","arr","macAddress","updateUserData","updateNetworkData","yaml","sshAuthorizedKeys","get","toJSON","sshList","deleteYamlDocProp","doc","paths","isMatchProp","userDataYAML","userDataJSON","findIndex","hasSameRuncmd","hasSimilarRuncmd","deletePackage","userDataTemplateValue","CONFIG_MAP","cloudInit","templateHasQGAPackage","i","splice","getOwnerReferencesFromVM","resource","kind","apiVersion","uid","saveSecret","isEdit","CLOUD_INIT","ownerReferences","setData","save","Promise","reject","saveAccessCredentials","toSave","secretId","keypair","getAccessCredentialsValidation","errors","fieldName","message","val","handlerUSBTablet","hasExist","assign","setBootMethod","boot","features","set","smm","noKeys","setCpuPinning","setTPM","deleteSSHFromUserData","userDataJson","isEmpty","$nextTick","$refs","yamlEditor","updateValue","toggleAdvanced","updateAgent","updateDataTemplateId","oldInstallAgent","updateReserved","updateTerminationGracePeriodSeconds","old","imageOSType","oldImageId","deep","hasCloudComment","_diff","difference"],"sourceRoot":""}